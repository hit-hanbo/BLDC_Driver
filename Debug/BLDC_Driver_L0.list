
BLDC_Driver_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800104c  0800104c  0001104c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001068  08001068  00011068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800106c  0800106c  0001106c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08001074  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000024  08001074  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003cf6  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c44  00000000  00000000  00023d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002c8  00000000  00000000  00024968  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00024c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000154b  00000000  00000000  00024e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001159  00000000  00000000  000263bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00027514  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000007c0  00000000  00000000  00027590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001034 	.word	0x08001034

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001034 	.word	0x08001034

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_GetREVID>:
/**
  * @brief Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <HAL_GetREVID+0x10>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	0c1b      	lsrs	r3, r3, #16
}
 800022a:	0018      	movs	r0, r3
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40015800 	.word	0x40015800

08000234 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <HAL_GetDEVID+0x14>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	051b      	lsls	r3, r3, #20
 800023e:	0d1b      	lsrs	r3, r3, #20
}
 8000240:	0018      	movs	r0, r3
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	40015800 	.word	0x40015800

0800024c <HAL_COMP_Init>:
            and LPTIM_IN2(PB7, PC2) should not be configured in alternate function.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr = 0U;
 8000254:	2300      	movs	r3, #0
 8000256:	61fb      	str	r3, [r7, #28]
  uint32_t exti_line = 0U;
 8000258:	2300      	movs	r3, #0
 800025a:	617b      	str	r3, [r7, #20]
  uint32_t comp_voltage_scaler_not_initialized = 0U;
 800025c:	2300      	movs	r3, #0
 800025e:	613b      	str	r3, [r7, #16]
  __IO uint32_t wait_loop_index = 0U;
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8000264:	231b      	movs	r3, #27
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || (__HAL_COMP_IS_LOCKED(hcomp)))
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d008      	beq.n	8000284 <HAL_COMP_Init+0x38>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	0fdb      	lsrs	r3, r3, #31
 800027a:	07da      	lsls	r2, r3, #31
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	061b      	lsls	r3, r3, #24
 8000280:	429a      	cmp	r2, r3
 8000282:	d104      	bne.n	800028e <HAL_COMP_Init+0x42>
  {
    status = HAL_ERROR;
 8000284:	231b      	movs	r3, #27
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
 800028c:	e145      	b.n	800051a <HAL_COMP_Init+0x2ce>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_POWERMODE(hcomp->Init.Mode));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    
    if(hcomp->State == HAL_COMP_STATE_RESET)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2221      	movs	r2, #33	; 0x21
 8000292:	5c9b      	ldrb	r3, [r3, r2]
 8000294:	b2db      	uxtb	r3, r3
 8000296:	2b00      	cmp	r3, #0
 8000298:	d107      	bne.n	80002aa <HAL_COMP_Init+0x5e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2220      	movs	r2, #32
 800029e:	2100      	movs	r1, #0
 80002a0:	5499      	strb	r1, [r3, r2]
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 f959 	bl	800055c <HAL_COMP_MspInit>
    }
    
    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InvertingInput   |
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	691a      	ldr	r2, [r3, #16]
               hcomp->Init.OutputPol         );
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	695b      	ldr	r3, [r3, #20]
    tmp_csr = (hcomp->Init.InvertingInput   |
 80002b2:	4313      	orrs	r3, r2
 80002b4:	61fb      	str	r3, [r7, #28]
    
    /* Configuration specific to comparator instance: COMP2 */
    if ((hcomp->Instance) == COMP2)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a9b      	ldr	r2, [pc, #620]	; (8000528 <HAL_COMP_Init+0x2dc>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d13c      	bne.n	800033a <HAL_COMP_Init+0xee>
    {
      /* Comparator input plus configuration is available on COMP2 only */
      /* Comparator power mode configuration is available on COMP2 only */
      tmp_csr |= (hcomp->Init.NonInvertingInput |
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68da      	ldr	r2, [r3, #12]
                  hcomp->Init.Mode               );
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	689b      	ldr	r3, [r3, #8]
      tmp_csr |= (hcomp->Init.NonInvertingInput |
 80002c8:	4313      	orrs	r3, r2
 80002ca:	69fa      	ldr	r2, [r7, #28]
 80002cc:	4313      	orrs	r3, r2
 80002ce:	61fb      	str	r3, [r7, #28]
      
      /* COMP2 specificity: when using VrefInt or subdivision of VrefInt,     */
      /* specific path must be enabled.                                       */
      if((hcomp->Init.InvertingInput == COMP_INPUT_MINUS_VREFINT)    ||
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	691b      	ldr	r3, [r3, #16]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d00b      	beq.n	80002f0 <HAL_COMP_Init+0xa4>
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_4VREFINT) ||
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	691b      	ldr	r3, [r3, #16]
      if((hcomp->Init.InvertingInput == COMP_INPUT_MINUS_VREFINT)    ||
 80002dc:	2b40      	cmp	r3, #64	; 0x40
 80002de:	d007      	beq.n	80002f0 <HAL_COMP_Init+0xa4>
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_2VREFINT) ||
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	691b      	ldr	r3, [r3, #16]
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_4VREFINT) ||
 80002e4:	2b50      	cmp	r3, #80	; 0x50
 80002e6:	d003      	beq.n	80002f0 <HAL_COMP_Init+0xa4>
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_3_4VREFINT)   )
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	691b      	ldr	r3, [r3, #16]
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_2VREFINT) ||
 80002ec:	2b60      	cmp	r3, #96	; 0x60
 80002ee:	d124      	bne.n	800033a <HAL_COMP_Init+0xee>
      {
        /* Memorize voltage scaler state before initialization */
        comp_voltage_scaler_not_initialized = (READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP) == 0U);
 80002f0:	4b8e      	ldr	r3, [pc, #568]	; (800052c <HAL_COMP_Init+0x2e0>)
 80002f2:	6a1a      	ldr	r2, [r3, #32]
 80002f4:	2380      	movs	r3, #128	; 0x80
 80002f6:	015b      	lsls	r3, r3, #5
 80002f8:	4013      	ands	r3, r2
 80002fa:	425a      	negs	r2, r3
 80002fc:	4153      	adcs	r3, r2
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	613b      	str	r3, [r7, #16]
        
        SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP  );
 8000302:	4b8a      	ldr	r3, [pc, #552]	; (800052c <HAL_COMP_Init+0x2e0>)
 8000304:	4a89      	ldr	r2, [pc, #548]	; (800052c <HAL_COMP_Init+0x2e0>)
 8000306:	6a12      	ldr	r2, [r2, #32]
 8000308:	2180      	movs	r1, #128	; 0x80
 800030a:	0149      	lsls	r1, r1, #5
 800030c:	430a      	orrs	r2, r1
 800030e:	621a      	str	r2, [r3, #32]
        
        /* Delay for COMP scaler bridge voltage stabilization */
        /* Apply the delay if voltage scaler bridge is enabled for the first time */
        if (comp_voltage_scaler_not_initialized != 0U)
 8000310:	693b      	ldr	r3, [r7, #16]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d011      	beq.n	800033a <HAL_COMP_Init+0xee>
        {
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles.                                     */
          wait_loop_index = (COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000U * 2U)));
 8000316:	4b86      	ldr	r3, [pc, #536]	; (8000530 <HAL_COMP_Init+0x2e4>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4986      	ldr	r1, [pc, #536]	; (8000534 <HAL_COMP_Init+0x2e8>)
 800031c:	0018      	movs	r0, r3
 800031e:	f7ff fef3 	bl	8000108 <__udivsi3>
 8000322:	0003      	movs	r3, r0
 8000324:	001a      	movs	r2, r3
 8000326:	4b84      	ldr	r3, [pc, #528]	; (8000538 <HAL_COMP_Init+0x2ec>)
 8000328:	4353      	muls	r3, r2
 800032a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800032c:	e002      	b.n	8000334 <HAL_COMP_Init+0xe8>
          {
            wait_loop_index--;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3b01      	subs	r3, #1
 8000332:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1f9      	bne.n	800032e <HAL_COMP_Init+0xe2>
        }
      }
    }
    
    /* Set comparator output connection to LPTIM */
    if (hcomp->Init.LPTIMConnection != COMP_LPTIMCONNECTION_DISABLED)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d045      	beq.n	80003ce <HAL_COMP_Init+0x182>
    {
      /* LPTIM connexion requested on COMP1 */
      if ((hcomp->Instance) == COMP1)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a7d      	ldr	r2, [pc, #500]	; (800053c <HAL_COMP_Init+0x2f0>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d105      	bne.n	8000358 <HAL_COMP_Init+0x10c>
        assert_param(IS_COMP1_LPTIMCONNECTION(hcomp->Init.LPTIMConnection));
        
        /* Note: Compatibility with previous driver version using             */
        /* generic literal COMP_LPTIMCONNECTION_ENABLED corresponding         */
        /* to LPTIM input 1 for COMP1.                                        */
          tmp_csr |= (COMP_CSR_COMP1LPTIM1IN1);
 800034c:	69fb      	ldr	r3, [r7, #28]
 800034e:	2280      	movs	r2, #128	; 0x80
 8000350:	0152      	lsls	r2, r2, #5
 8000352:	4313      	orrs	r3, r2
 8000354:	61fb      	str	r3, [r7, #28]
 8000356:	e03a      	b.n	80003ce <HAL_COMP_Init+0x182>
      else
      {
        /* Note : COMP2 can be connected to input 1 or input 2 of LPTIM if requested */
        assert_param(IS_COMP2_LPTIMCONNECTION(hcomp->Init.LPTIMConnection));
        
        switch (hcomp->Init.LPTIMConnection)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d105      	bne.n	800036c <HAL_COMP_Init+0x120>
        {
        case  COMP_LPTIMCONNECTION_IN1_ENABLED :
          tmp_csr |= (COMP_CSR_COMP2LPTIM1IN1);
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	2280      	movs	r2, #128	; 0x80
 8000364:	0192      	lsls	r2, r2, #6
 8000366:	4313      	orrs	r3, r2
 8000368:	61fb      	str	r3, [r7, #28]
          break;
 800036a:	e030      	b.n	80003ce <HAL_COMP_Init+0x182>
          /* Note: Default case for compatibility with previous driver version*/
          /* using generic literal COMP_LPTIMCONNECTION_ENABLED corresponding */
          /* to LPTIM input 2 for COMP2.                                      */
          
          /* Check the MCU_ID in order to allow or not the COMP2 connection to LPTIM input 2 */
          if (((HAL_GetDEVID() == C_DEV_ID_L073) && (HAL_GetREVID() == C_REV_ID_A))
 800036c:	f7ff ff62 	bl	8000234 <HAL_GetDEVID>
 8000370:	0002      	movs	r2, r0
 8000372:	4b73      	ldr	r3, [pc, #460]	; (8000540 <HAL_COMP_Init+0x2f4>)
 8000374:	429a      	cmp	r2, r3
 8000376:	d106      	bne.n	8000386 <HAL_COMP_Init+0x13a>
 8000378:	f7ff ff52 	bl	8000220 <HAL_GetREVID>
 800037c:	0002      	movs	r2, r0
 800037e:	2380      	movs	r3, #128	; 0x80
 8000380:	015b      	lsls	r3, r3, #5
 8000382:	429a      	cmp	r2, r3
 8000384:	d018      	beq.n	80003b8 <HAL_COMP_Init+0x16c>
                            ||
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_A))
 8000386:	f7ff ff55 	bl	8000234 <HAL_GetDEVID>
 800038a:	0002      	movs	r2, r0
                            ||
 800038c:	4b6d      	ldr	r3, [pc, #436]	; (8000544 <HAL_COMP_Init+0x2f8>)
 800038e:	429a      	cmp	r2, r3
 8000390:	d106      	bne.n	80003a0 <HAL_COMP_Init+0x154>
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_A))
 8000392:	f7ff ff45 	bl	8000220 <HAL_GetREVID>
 8000396:	0002      	movs	r2, r0
 8000398:	2380      	movs	r3, #128	; 0x80
 800039a:	015b      	lsls	r3, r3, #5
 800039c:	429a      	cmp	r2, r3
 800039e:	d00b      	beq.n	80003b8 <HAL_COMP_Init+0x16c>
                            ||
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_Z)))
 80003a0:	f7ff ff48 	bl	8000234 <HAL_GetDEVID>
 80003a4:	0002      	movs	r2, r0
                            ||
 80003a6:	4b67      	ldr	r3, [pc, #412]	; (8000544 <HAL_COMP_Init+0x2f8>)
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d10a      	bne.n	80003c2 <HAL_COMP_Init+0x176>
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_Z)))
 80003ac:	f7ff ff38 	bl	8000220 <HAL_GetREVID>
 80003b0:	0002      	movs	r2, r0
 80003b2:	4b65      	ldr	r3, [pc, #404]	; (8000548 <HAL_COMP_Init+0x2fc>)
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d104      	bne.n	80003c2 <HAL_COMP_Init+0x176>
          {
            assert_param(IS_COMP2_LPTIMCONNECTION_RESTRICTED(hcomp->Init.LPTIMConnection));
            
            /* Error: On the selected device, COMP2 cannot be connected to LPTIM input 2 */
            status = HAL_ERROR;
 80003b8:	231b      	movs	r3, #27
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	2201      	movs	r2, #1
 80003be:	701a      	strb	r2, [r3, #0]
          }
          else
          {
            tmp_csr |= (COMP_CSR_COMP2LPTIM1IN2);
          }
          break;
 80003c0:	e004      	b.n	80003cc <HAL_COMP_Init+0x180>
            tmp_csr |= (COMP_CSR_COMP2LPTIM1IN2);
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	0152      	lsls	r2, r2, #5
 80003c8:	4313      	orrs	r3, r2
 80003ca:	61fb      	str	r3, [r7, #28]
          break;
 80003cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
    
    /* Update comparator register */
    if ((hcomp->Instance) == COMP1)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a5a      	ldr	r2, [pc, #360]	; (800053c <HAL_COMP_Init+0x2f0>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d10a      	bne.n	80003ee <HAL_COMP_Init+0x1a2>
    {
      MODIFY_REG(hcomp->Instance->CSR,
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	6812      	ldr	r2, [r2, #0]
 80003e0:	6812      	ldr	r2, [r2, #0]
 80003e2:	495a      	ldr	r1, [pc, #360]	; (800054c <HAL_COMP_Init+0x300>)
 80003e4:	4011      	ands	r1, r2
 80003e6:	69fa      	ldr	r2, [r7, #28]
 80003e8:	430a      	orrs	r2, r1
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	e009      	b.n	8000402 <HAL_COMP_Init+0x1b6>
                 tmp_csr
                );
    }
    else /* Instance == COMP2 */
    {
      MODIFY_REG(hcomp->Instance->CSR,
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	6812      	ldr	r2, [r2, #0]
 80003f6:	6812      	ldr	r2, [r2, #0]
 80003f8:	4955      	ldr	r1, [pc, #340]	; (8000550 <HAL_COMP_Init+0x304>)
 80003fa:	4011      	ands	r1, r2
 80003fc:	69fa      	ldr	r2, [r7, #28]
 80003fe:	430a      	orrs	r2, r1
 8000400:	601a      	str	r2, [r3, #0]
    
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	2380      	movs	r3, #128	; 0x80
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	429a      	cmp	r2, r3
 800040c:	d107      	bne.n	800041e <HAL_COMP_Init+0x1d2>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800040e:	4b4b      	ldr	r3, [pc, #300]	; (800053c <HAL_COMP_Init+0x2f0>)
 8000410:	4a4a      	ldr	r2, [pc, #296]	; (800053c <HAL_COMP_Init+0x2f0>)
 8000412:	6812      	ldr	r2, [r2, #0]
 8000414:	2180      	movs	r1, #128	; 0x80
 8000416:	0049      	lsls	r1, r1, #1
 8000418:	430a      	orrs	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	e005      	b.n	800042a <HAL_COMP_Init+0x1de>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800041e:	4b47      	ldr	r3, [pc, #284]	; (800053c <HAL_COMP_Init+0x2f0>)
 8000420:	4a46      	ldr	r2, [pc, #280]	; (800053c <HAL_COMP_Init+0x2f0>)
 8000422:	6812      	ldr	r2, [r2, #0]
 8000424:	494b      	ldr	r1, [pc, #300]	; (8000554 <HAL_COMP_Init+0x308>)
 8000426:	400a      	ands	r2, r1
 8000428:	601a      	str	r2, [r3, #0]
    }
    
    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a43      	ldr	r2, [pc, #268]	; (800053c <HAL_COMP_Init+0x2f0>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d102      	bne.n	800043a <HAL_COMP_Init+0x1ee>
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	039b      	lsls	r3, r3, #14
 8000438:	e001      	b.n	800043e <HAL_COMP_Init+0x1f2>
 800043a:	2380      	movs	r3, #128	; 0x80
 800043c:	03db      	lsls	r3, r3, #15
 800043e:	617b      	str	r3, [r7, #20]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != RESET)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	2203      	movs	r2, #3
 8000446:	4013      	ands	r3, r2
 8000448:	d04f      	beq.n	80004ea <HAL_COMP_Init+0x29e>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != RESET)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	2210      	movs	r2, #16
 8000450:	4013      	ands	r3, r2
 8000452:	d006      	beq.n	8000462 <HAL_COMP_Init+0x216>
      {
        SET_BIT(EXTI->RTSR, exti_line);
 8000454:	4b40      	ldr	r3, [pc, #256]	; (8000558 <HAL_COMP_Init+0x30c>)
 8000456:	4a40      	ldr	r2, [pc, #256]	; (8000558 <HAL_COMP_Init+0x30c>)
 8000458:	6891      	ldr	r1, [r2, #8]
 800045a:	697a      	ldr	r2, [r7, #20]
 800045c:	430a      	orrs	r2, r1
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	e006      	b.n	8000470 <HAL_COMP_Init+0x224>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR, exti_line);
 8000462:	4b3d      	ldr	r3, [pc, #244]	; (8000558 <HAL_COMP_Init+0x30c>)
 8000464:	4a3c      	ldr	r2, [pc, #240]	; (8000558 <HAL_COMP_Init+0x30c>)
 8000466:	6892      	ldr	r2, [r2, #8]
 8000468:	6979      	ldr	r1, [r7, #20]
 800046a:	43c9      	mvns	r1, r1
 800046c:	400a      	ands	r2, r1
 800046e:	609a      	str	r2, [r3, #8]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != RESET)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	2220      	movs	r2, #32
 8000476:	4013      	ands	r3, r2
 8000478:	d006      	beq.n	8000488 <HAL_COMP_Init+0x23c>
      {
        SET_BIT(EXTI->FTSR, exti_line);
 800047a:	4b37      	ldr	r3, [pc, #220]	; (8000558 <HAL_COMP_Init+0x30c>)
 800047c:	4a36      	ldr	r2, [pc, #216]	; (8000558 <HAL_COMP_Init+0x30c>)
 800047e:	68d1      	ldr	r1, [r2, #12]
 8000480:	697a      	ldr	r2, [r7, #20]
 8000482:	430a      	orrs	r2, r1
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	e006      	b.n	8000496 <HAL_COMP_Init+0x24a>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR, exti_line);
 8000488:	4b33      	ldr	r3, [pc, #204]	; (8000558 <HAL_COMP_Init+0x30c>)
 800048a:	4a33      	ldr	r2, [pc, #204]	; (8000558 <HAL_COMP_Init+0x30c>)
 800048c:	68d2      	ldr	r2, [r2, #12]
 800048e:	6979      	ldr	r1, [r7, #20]
 8000490:	43c9      	mvns	r1, r1
 8000492:	400a      	ands	r2, r1
 8000494:	60da      	str	r2, [r3, #12]
      }
      
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR, exti_line);
 8000496:	4b30      	ldr	r3, [pc, #192]	; (8000558 <HAL_COMP_Init+0x30c>)
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	615a      	str	r2, [r3, #20]
      
      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != RESET)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	2202      	movs	r2, #2
 80004a2:	4013      	ands	r3, r2
 80004a4:	d006      	beq.n	80004b4 <HAL_COMP_Init+0x268>
      {
        SET_BIT(EXTI->EMR, exti_line);
 80004a6:	4b2c      	ldr	r3, [pc, #176]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004a8:	4a2b      	ldr	r2, [pc, #172]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004aa:	6851      	ldr	r1, [r2, #4]
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	430a      	orrs	r2, r1
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	e006      	b.n	80004c2 <HAL_COMP_Init+0x276>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR, exti_line);
 80004b4:	4b28      	ldr	r3, [pc, #160]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004b6:	4a28      	ldr	r2, [pc, #160]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004b8:	6852      	ldr	r2, [r2, #4]
 80004ba:	6979      	ldr	r1, [r7, #20]
 80004bc:	43c9      	mvns	r1, r1
 80004be:	400a      	ands	r2, r1
 80004c0:	605a      	str	r2, [r3, #4]
      }
      
      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != RESET)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	2201      	movs	r2, #1
 80004c8:	4013      	ands	r3, r2
 80004ca:	d006      	beq.n	80004da <HAL_COMP_Init+0x28e>
      {
        SET_BIT(EXTI->IMR, exti_line);
 80004cc:	4b22      	ldr	r3, [pc, #136]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004ce:	4a22      	ldr	r2, [pc, #136]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004d0:	6811      	ldr	r1, [r2, #0]
 80004d2:	697a      	ldr	r2, [r7, #20]
 80004d4:	430a      	orrs	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	e015      	b.n	8000506 <HAL_COMP_Init+0x2ba>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR, exti_line);
 80004da:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004dc:	4a1e      	ldr	r2, [pc, #120]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004de:	6812      	ldr	r2, [r2, #0]
 80004e0:	6979      	ldr	r1, [r7, #20]
 80004e2:	43c9      	mvns	r1, r1
 80004e4:	400a      	ands	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	e00d      	b.n	8000506 <HAL_COMP_Init+0x2ba>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR, exti_line);
 80004ea:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004ec:	4a1a      	ldr	r2, [pc, #104]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004ee:	6852      	ldr	r2, [r2, #4]
 80004f0:	6979      	ldr	r1, [r7, #20]
 80004f2:	43c9      	mvns	r1, r1
 80004f4:	400a      	ands	r2, r1
 80004f6:	605a      	str	r2, [r3, #4]
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR, exti_line);
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004fa:	4a17      	ldr	r2, [pc, #92]	; (8000558 <HAL_COMP_Init+0x30c>)
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	6979      	ldr	r1, [r7, #20]
 8000500:	43c9      	mvns	r1, r1
 8000502:	400a      	ands	r2, r1
 8000504:	601a      	str	r2, [r3, #0]
    }
    
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2221      	movs	r2, #33	; 0x21
 800050a:	5c9b      	ldrb	r3, [r3, r2]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d103      	bne.n	800051a <HAL_COMP_Init+0x2ce>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2221      	movs	r2, #33	; 0x21
 8000516:	2101      	movs	r1, #1
 8000518:	5499      	strb	r1, [r3, r2]
    }
  }
  
  return status;
 800051a:	231b      	movs	r3, #27
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	781b      	ldrb	r3, [r3, #0]
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	b008      	add	sp, #32
 8000526:	bd80      	pop	{r7, pc}
 8000528:	4001001c 	.word	0x4001001c
 800052c:	40010000 	.word	0x40010000
 8000530:	20000000 	.word	0x20000000
 8000534:	001e8480 	.word	0x001e8480
 8000538:	00000bb8 	.word	0x00000bb8
 800053c:	40010018 	.word	0x40010018
 8000540:	00000447 	.word	0x00000447
 8000544:	00000417 	.word	0x00000417
 8000548:	00001008 	.word	0x00001008
 800054c:	ffff6ecf 	.word	0xffff6ecf
 8000550:	ffff4887 	.word	0xffff4887
 8000554:	fffffeff 	.word	0xfffffeff
 8000558:	40010400 	.word	0x40010400

0800055c <HAL_COMP_MspInit>:
  * @brief  Initialize the COMP MSP.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_MspInit(COMP_HandleTypeDef *hcomp)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_MspInit could be implemented in the user file
   */
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b002      	add	sp, #8
 800056a:	bd80      	pop	{r7, pc}

0800056c <LED_Init>:



// LD3 Init
void LED_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	RCC->IOPENR   |= RCC_IOPENR_GPIOBEN;// ENABLE GPIOB Clock
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <LED_Init+0x54>)
 8000572:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <LED_Init+0x54>)
 8000574:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000576:	2102      	movs	r1, #2
 8000578:	430a      	orrs	r2, r1
 800057a:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOB->MODER  |= (1 << 6);
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <LED_Init+0x58>)
 800057e:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <LED_Init+0x58>)
 8000580:	6812      	ldr	r2, [r2, #0]
 8000582:	2140      	movs	r1, #64	; 0x40
 8000584:	430a      	orrs	r2, r1
 8000586:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  &= ~(1 << 7);         // LD3 Output
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <LED_Init+0x58>)
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <LED_Init+0x58>)
 800058c:	6812      	ldr	r2, [r2, #0]
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	438a      	bics	r2, r1
 8000592:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~(1 << 3);         // LD3 PP
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <LED_Init+0x58>)
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <LED_Init+0x58>)
 8000598:	6852      	ldr	r2, [r2, #4]
 800059a:	2108      	movs	r1, #8
 800059c:	438a      	bics	r2, r1
 800059e:	605a      	str	r2, [r3, #4]
	GPIOB->PUPDR  |= (1 << 6);
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <LED_Init+0x58>)
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <LED_Init+0x58>)
 80005a4:	68d2      	ldr	r2, [r2, #12]
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	430a      	orrs	r2, r1
 80005aa:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR  &= ~(1 << 7);         // Pull-up
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <LED_Init+0x58>)
 80005ae:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <LED_Init+0x58>)
 80005b0:	68d2      	ldr	r2, [r2, #12]
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	438a      	bics	r2, r1
 80005b6:	60da      	str	r2, [r3, #12]
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	40021000 	.word	0x40021000
 80005c4:	50000400 	.word	0x50000400

080005c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	0002      	movs	r2, r0
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <NVIC_EnableIRQ+0x28>)
 80005d6:	1dfa      	adds	r2, r7, #7
 80005d8:	7812      	ldrb	r2, [r2, #0]
 80005da:	0011      	movs	r1, r2
 80005dc:	221f      	movs	r2, #31
 80005de:	400a      	ands	r2, r1
 80005e0:	2101      	movs	r1, #1
 80005e2:	4091      	lsls	r1, r2
 80005e4:	000a      	movs	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b002      	add	sp, #8
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b5b0      	push	{r4, r5, r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	0002      	movs	r2, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b7f      	cmp	r3, #127	; 0x7f
 8000608:	d932      	bls.n	8000670 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800060a:	4c2f      	ldr	r4, [pc, #188]	; (80006c8 <NVIC_SetPriority+0xd4>)
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	001a      	movs	r2, r3
 8000612:	230f      	movs	r3, #15
 8000614:	4013      	ands	r3, r2
 8000616:	3b08      	subs	r3, #8
 8000618:	0899      	lsrs	r1, r3, #2
 800061a:	4a2b      	ldr	r2, [pc, #172]	; (80006c8 <NVIC_SetPriority+0xd4>)
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	0018      	movs	r0, r3
 8000622:	230f      	movs	r3, #15
 8000624:	4003      	ands	r3, r0
 8000626:	3b08      	subs	r3, #8
 8000628:	089b      	lsrs	r3, r3, #2
 800062a:	3306      	adds	r3, #6
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	18d3      	adds	r3, r2, r3
 8000630:	3304      	adds	r3, #4
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	1dfa      	adds	r2, r7, #7
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	0010      	movs	r0, r2
 800063a:	2203      	movs	r2, #3
 800063c:	4002      	ands	r2, r0
 800063e:	00d2      	lsls	r2, r2, #3
 8000640:	20ff      	movs	r0, #255	; 0xff
 8000642:	4090      	lsls	r0, r2
 8000644:	0002      	movs	r2, r0
 8000646:	43d2      	mvns	r2, r2
 8000648:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	019b      	lsls	r3, r3, #6
 800064e:	20ff      	movs	r0, #255	; 0xff
 8000650:	4018      	ands	r0, r3
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	001d      	movs	r5, r3
 8000658:	2303      	movs	r3, #3
 800065a:	402b      	ands	r3, r5
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	4098      	lsls	r0, r3
 8000660:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000662:	431a      	orrs	r2, r3
 8000664:	1d8b      	adds	r3, r1, #6
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	18e3      	adds	r3, r4, r3
 800066a:	3304      	adds	r3, #4
 800066c:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 800066e:	e027      	b.n	80006c0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000670:	4c16      	ldr	r4, [pc, #88]	; (80006cc <NVIC_SetPriority+0xd8>)
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	b25b      	sxtb	r3, r3
 8000678:	089b      	lsrs	r3, r3, #2
 800067a:	4914      	ldr	r1, [pc, #80]	; (80006cc <NVIC_SetPriority+0xd8>)
 800067c:	1dfa      	adds	r2, r7, #7
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	b252      	sxtb	r2, r2
 8000682:	0892      	lsrs	r2, r2, #2
 8000684:	32c0      	adds	r2, #192	; 0xc0
 8000686:	0092      	lsls	r2, r2, #2
 8000688:	5852      	ldr	r2, [r2, r1]
 800068a:	1df9      	adds	r1, r7, #7
 800068c:	7809      	ldrb	r1, [r1, #0]
 800068e:	0008      	movs	r0, r1
 8000690:	2103      	movs	r1, #3
 8000692:	4001      	ands	r1, r0
 8000694:	00c9      	lsls	r1, r1, #3
 8000696:	20ff      	movs	r0, #255	; 0xff
 8000698:	4088      	lsls	r0, r1
 800069a:	0001      	movs	r1, r0
 800069c:	43c9      	mvns	r1, r1
 800069e:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	0192      	lsls	r2, r2, #6
 80006a4:	20ff      	movs	r0, #255	; 0xff
 80006a6:	4010      	ands	r0, r2
 80006a8:	1dfa      	adds	r2, r7, #7
 80006aa:	7812      	ldrb	r2, [r2, #0]
 80006ac:	0015      	movs	r5, r2
 80006ae:	2203      	movs	r2, #3
 80006b0:	402a      	ands	r2, r5
 80006b2:	00d2      	lsls	r2, r2, #3
 80006b4:	4090      	lsls	r0, r2
 80006b6:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80006b8:	430a      	orrs	r2, r1
 80006ba:	33c0      	adds	r3, #192	; 0xc0
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	511a      	str	r2, [r3, r4]
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	b002      	add	sp, #8
 80006c6:	bdb0      	pop	{r4, r5, r7, pc}
 80006c8:	e000ed00 	.word	0xe000ed00
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <COMP1_IT_Init>:
#include "COMP.h"
#include "stm32l011xx.h"
#include "stm32l0xx_hal_comp.h"

void COMP1_IT_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	EXTI->EMR  &= ~(1 << 21);
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <COMP1_IT_Init+0x40>)
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <COMP1_IT_Init+0x40>)
 80006d8:	6852      	ldr	r2, [r2, #4]
 80006da:	490e      	ldr	r1, [pc, #56]	; (8000714 <COMP1_IT_Init+0x44>)
 80006dc:	400a      	ands	r2, r1
 80006de:	605a      	str	r2, [r3, #4]
	EXTI->IMR  &= ~(1 << 21);
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <COMP1_IT_Init+0x40>)
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <COMP1_IT_Init+0x40>)
 80006e4:	6812      	ldr	r2, [r2, #0]
 80006e6:	490b      	ldr	r1, [pc, #44]	; (8000714 <COMP1_IT_Init+0x44>)
 80006e8:	400a      	ands	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
	EXTI->RTSR |= (1 << 21);
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <COMP1_IT_Init+0x40>)
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <COMP1_IT_Init+0x40>)
 80006f0:	6892      	ldr	r2, [r2, #8]
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	0389      	lsls	r1, r1, #14
 80006f6:	430a      	orrs	r2, r1
 80006f8:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80006fa:	200c      	movs	r0, #12
 80006fc:	f7ff ff64 	bl	80005c8 <NVIC_EnableIRQ>
	NVIC_SetPriority(ADC1_COMP_IRQn, 0);
 8000700:	2100      	movs	r1, #0
 8000702:	200c      	movs	r0, #12
 8000704:	f7ff ff76 	bl	80005f4 <NVIC_SetPriority>
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	40010400 	.word	0x40010400
 8000714:	ffdfffff 	.word	0xffdfffff

08000718 <COMP1_Init>:

void COMP1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
	COMP_HandleTypeDef hcomp1;

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <COMP1_Init+0x90>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <COMP1_Init+0x90>)
 8000722:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000724:	2101      	movs	r1, #1
 8000726:	430a      	orrs	r2, r1
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
	COMP1_IT_Init();
 800072a:	f7ff ffd1 	bl	80006d0 <COMP1_IT_Init>
	COMP1->CSR |= COMP_CSR_COMP1EN;      // ENABLE COMP1
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <COMP1_Init+0x94>)
 8000730:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <COMP1_Init+0x94>)
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	2101      	movs	r1, #1
 8000736:	430a      	orrs	r2, r1
 8000738:	601a      	str	r2, [r3, #0]
	// GPIOA Init - Analog Mode
	RCC->IOPENR   |= RCC_IOPENR_GPIOAEN;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <COMP1_Init+0x90>)
 800073c:	4a1a      	ldr	r2, [pc, #104]	; (80007a8 <COMP1_Init+0x90>)
 800073e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000740:	2101      	movs	r1, #1
 8000742:	430a      	orrs	r2, r1
 8000744:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOA->MODER  |= 0x00000f0f;         // PA0, PA1, PA4, PA5, Input Mode
 8000746:	23a0      	movs	r3, #160	; 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	22a0      	movs	r2, #160	; 0xa0
 800074c:	05d2      	lsls	r2, r2, #23
 800074e:	6812      	ldr	r2, [r2, #0]
 8000750:	4917      	ldr	r1, [pc, #92]	; (80007b0 <COMP1_Init+0x98>)
 8000752:	430a      	orrs	r2, r1
 8000754:	601a      	str	r2, [r3, #0]
	GPIOA->PUPDR  &= 0xfffff0f0;         // PA0, PA1, PA4, PA5, Floating
 8000756:	23a0      	movs	r3, #160	; 0xa0
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	22a0      	movs	r2, #160	; 0xa0
 800075c:	05d2      	lsls	r2, r2, #23
 800075e:	68d2      	ldr	r2, [r2, #12]
 8000760:	4914      	ldr	r1, [pc, #80]	; (80007b4 <COMP1_Init+0x9c>)
 8000762:	400a      	ands	r2, r1
 8000764:	60da      	str	r2, [r3, #12]

	  hcomp1.Instance = COMP1;
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <COMP1_Init+0x94>)
 800076a:	601a      	str	r2, [r3, #0]
	  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2220      	movs	r2, #32
 8000770:	611a      	str	r2, [r3, #16]
	  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
	  hcomp1.Init.LPTIMConnection = COMP_LPTIMCONNECTION_DISABLED;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
	  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
	  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
	  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
	  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2211      	movs	r2, #17
 8000794:	61da      	str	r2, [r3, #28]

	  HAL_COMP_Init(&hcomp1);
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fd57 	bl	800024c <HAL_COMP_Init>
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b00a      	add	sp, #40	; 0x28
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010018 	.word	0x40010018
 80007b0:	00000f0f 	.word	0x00000f0f
 80007b4:	fffff0f0 	.word	0xfffff0f0

080007b8 <GPIO_SDx_Init>:
 *   SD2 < -- > PA11  <D10>
 *   SD3 < -- > PA12  <D2>
 */

void GPIO_SDx_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	/* GPIOB / GPIOC Init */
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;          // ENABLE GPIOA Clock
 80007bc:	4b37      	ldr	r3, [pc, #220]	; (800089c <GPIO_SDx_Init+0xe4>)
 80007be:	4a37      	ldr	r2, [pc, #220]	; (800089c <GPIO_SDx_Init+0xe4>)
 80007c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80007c2:	2101      	movs	r1, #1
 80007c4:	430a      	orrs	r2, r1
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;          // ENABLE GPIOB Clock
 80007c8:	4b34      	ldr	r3, [pc, #208]	; (800089c <GPIO_SDx_Init+0xe4>)
 80007ca:	4a34      	ldr	r2, [pc, #208]	; (800089c <GPIO_SDx_Init+0xe4>)
 80007cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80007ce:	2102      	movs	r1, #2
 80007d0:	430a      	orrs	r2, r1
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOB->MODER |= (1 << 14);
 80007d4:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 80007d6:	4a32      	ldr	r2, [pc, #200]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 80007d8:	6812      	ldr	r2, [r2, #0]
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	01c9      	lsls	r1, r1, #7
 80007de:	430a      	orrs	r2, r1
 80007e0:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1 << 15);                 // GPIOB7 Output
 80007e2:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 80007e4:	4a2e      	ldr	r2, [pc, #184]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 80007e6:	6812      	ldr	r2, [r2, #0]
 80007e8:	492e      	ldr	r1, [pc, #184]	; (80008a4 <GPIO_SDx_Init+0xec>)
 80007ea:	400a      	ands	r2, r1
 80007ec:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER&= ~(1 << 7);                  // GPIOB7 PP
 80007ee:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 80007f0:	4a2b      	ldr	r2, [pc, #172]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 80007f2:	6852      	ldr	r2, [r2, #4]
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	438a      	bics	r2, r1
 80007f8:	605a      	str	r2, [r3, #4]
	GPIOB->PUPDR |= (1 << 15);
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 80007fc:	4a28      	ldr	r2, [pc, #160]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 80007fe:	68d2      	ldr	r2, [r2, #12]
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0209      	lsls	r1, r1, #8
 8000804:	430a      	orrs	r2, r1
 8000806:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR &= ~(1 <<14);                  // GPIOB7 Pull-Down
 8000808:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 800080a:	4a25      	ldr	r2, [pc, #148]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 800080c:	68d2      	ldr	r2, [r2, #12]
 800080e:	4926      	ldr	r1, [pc, #152]	; (80008a8 <GPIO_SDx_Init+0xf0>)
 8000810:	400a      	ands	r2, r1
 8000812:	60da      	str	r2, [r3, #12]
	A_PHASE_OFF;
 8000814:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 8000816:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <GPIO_SDx_Init+0xe8>)
 8000818:	6952      	ldr	r2, [r2, #20]
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	438a      	bics	r2, r1
 800081e:	615a      	str	r2, [r3, #20]
	GPIOA->MODER |= (1 << 24) | (1 << 22);
 8000820:	23a0      	movs	r3, #160	; 0xa0
 8000822:	05db      	lsls	r3, r3, #23
 8000824:	22a0      	movs	r2, #160	; 0xa0
 8000826:	05d2      	lsls	r2, r2, #23
 8000828:	6812      	ldr	r2, [r2, #0]
 800082a:	21a0      	movs	r1, #160	; 0xa0
 800082c:	0449      	lsls	r1, r1, #17
 800082e:	430a      	orrs	r2, r1
 8000830:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~((1 << 25) | (1 << 23));    // PA11 PA12 Output
 8000832:	23a0      	movs	r3, #160	; 0xa0
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	22a0      	movs	r2, #160	; 0xa0
 8000838:	05d2      	lsls	r2, r2, #23
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	491b      	ldr	r1, [pc, #108]	; (80008ac <GPIO_SDx_Init+0xf4>)
 800083e:	400a      	ands	r2, r1
 8000840:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~((1 << 12) | (1 << 11));   // PA11 PA12 PP
 8000842:	23a0      	movs	r3, #160	; 0xa0
 8000844:	05db      	lsls	r3, r3, #23
 8000846:	22a0      	movs	r2, #160	; 0xa0
 8000848:	05d2      	lsls	r2, r2, #23
 800084a:	6852      	ldr	r2, [r2, #4]
 800084c:	4918      	ldr	r1, [pc, #96]	; (80008b0 <GPIO_SDx_Init+0xf8>)
 800084e:	400a      	ands	r2, r1
 8000850:	605a      	str	r2, [r3, #4]
	GPIOA->PUPDR |= (1 << 25) | (1 << 23);
 8000852:	23a0      	movs	r3, #160	; 0xa0
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	22a0      	movs	r2, #160	; 0xa0
 8000858:	05d2      	lsls	r2, r2, #23
 800085a:	68d2      	ldr	r2, [r2, #12]
 800085c:	21a0      	movs	r1, #160	; 0xa0
 800085e:	0489      	lsls	r1, r1, #18
 8000860:	430a      	orrs	r2, r1
 8000862:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR &= ~((1 << 24) | (1 << 22));    // PA11 PA12 Pull-Down
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	22a0      	movs	r2, #160	; 0xa0
 800086a:	05d2      	lsls	r2, r2, #23
 800086c:	68d2      	ldr	r2, [r2, #12]
 800086e:	4911      	ldr	r1, [pc, #68]	; (80008b4 <GPIO_SDx_Init+0xfc>)
 8000870:	400a      	ands	r2, r1
 8000872:	60da      	str	r2, [r3, #12]
	B_PHASE_OFF;
 8000874:	23a0      	movs	r3, #160	; 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	22a0      	movs	r2, #160	; 0xa0
 800087a:	05d2      	lsls	r2, r2, #23
 800087c:	6952      	ldr	r2, [r2, #20]
 800087e:	490e      	ldr	r1, [pc, #56]	; (80008b8 <GPIO_SDx_Init+0x100>)
 8000880:	400a      	ands	r2, r1
 8000882:	615a      	str	r2, [r3, #20]
	C_PHASE_OFF;
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	22a0      	movs	r2, #160	; 0xa0
 800088a:	05d2      	lsls	r2, r2, #23
 800088c:	6952      	ldr	r2, [r2, #20]
 800088e:	490b      	ldr	r1, [pc, #44]	; (80008bc <GPIO_SDx_Init+0x104>)
 8000890:	400a      	ands	r2, r1
 8000892:	615a      	str	r2, [r3, #20]
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40021000 	.word	0x40021000
 80008a0:	50000400 	.word	0x50000400
 80008a4:	ffff7fff 	.word	0xffff7fff
 80008a8:	ffffbfff 	.word	0xffffbfff
 80008ac:	fd7fffff 	.word	0xfd7fffff
 80008b0:	ffffe7ff 	.word	0xffffe7ff
 80008b4:	febfffff 	.word	0xfebfffff
 80008b8:	fffff7ff 	.word	0xfffff7ff
 80008bc:	ffffefff 	.word	0xffffefff

080008c0 <Bridge_A_B>:

void Bridge_A_B(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	A_PHASE_ON;
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <Bridge_A_B+0x60>)
 80008c6:	4a16      	ldr	r2, [pc, #88]	; (8000920 <Bridge_A_B+0x60>)
 80008c8:	6952      	ldr	r2, [r2, #20]
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	430a      	orrs	r2, r1
 80008ce:	615a      	str	r2, [r3, #20]
	PWM_A_ON;
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	22fa      	movs	r2, #250	; 0xfa
 80008d6:	635a      	str	r2, [r3, #52]	; 0x34
	B_PHASE_LOW_ON;
 80008d8:	23a0      	movs	r3, #160	; 0xa0
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	22a0      	movs	r2, #160	; 0xa0
 80008de:	05d2      	lsls	r2, r2, #23
 80008e0:	6952      	ldr	r2, [r2, #20]
 80008e2:	2180      	movs	r1, #128	; 0x80
 80008e4:	0109      	lsls	r1, r1, #4
 80008e6:	430a      	orrs	r2, r1
 80008e8:	615a      	str	r2, [r3, #20]
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2200      	movs	r2, #0
 80008f0:	639a      	str	r2, [r3, #56]	; 0x38
	C_PHASE_OFF;
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	22a0      	movs	r2, #160	; 0xa0
 80008f8:	05d2      	lsls	r2, r2, #23
 80008fa:	6952      	ldr	r2, [r2, #20]
 80008fc:	4909      	ldr	r1, [pc, #36]	; (8000924 <Bridge_A_B+0x64>)
 80008fe:	400a      	ands	r2, r1
 8000900:	615a      	str	r2, [r3, #20]
	COMP_C_PHASE;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <Bridge_A_B+0x68>)
 8000904:	4a08      	ldr	r2, [pc, #32]	; (8000928 <Bridge_A_B+0x68>)
 8000906:	6812      	ldr	r2, [r2, #0]
 8000908:	2120      	movs	r1, #32
 800090a:	430a      	orrs	r2, r1
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <Bridge_A_B+0x68>)
 8000910:	4a05      	ldr	r2, [pc, #20]	; (8000928 <Bridge_A_B+0x68>)
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	2110      	movs	r1, #16
 8000916:	430a      	orrs	r2, r1
 8000918:	601a      	str	r2, [r3, #0]
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	50000400 	.word	0x50000400
 8000924:	ffffefff 	.word	0xffffefff
 8000928:	40010018 	.word	0x40010018

0800092c <Bridge_B_C>:

void Bridge_B_C(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	B_PHASE_ON;
 8000930:	23a0      	movs	r3, #160	; 0xa0
 8000932:	05db      	lsls	r3, r3, #23
 8000934:	22a0      	movs	r2, #160	; 0xa0
 8000936:	05d2      	lsls	r2, r2, #23
 8000938:	6952      	ldr	r2, [r2, #20]
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	0109      	lsls	r1, r1, #4
 800093e:	430a      	orrs	r2, r1
 8000940:	615a      	str	r2, [r3, #20]
	PWM_B_ON;
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	22fa      	movs	r2, #250	; 0xfa
 8000948:	639a      	str	r2, [r3, #56]	; 0x38
	C_PHASE_LOW_ON;
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	22a0      	movs	r2, #160	; 0xa0
 8000950:	05d2      	lsls	r2, r2, #23
 8000952:	6952      	ldr	r2, [r2, #20]
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	0149      	lsls	r1, r1, #5
 8000958:	430a      	orrs	r2, r1
 800095a:	615a      	str	r2, [r3, #20]
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	05db      	lsls	r3, r3, #23
 8000960:	2200      	movs	r2, #0
 8000962:	63da      	str	r2, [r3, #60]	; 0x3c
	A_PHASE_OFF;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <Bridge_B_C+0x64>)
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <Bridge_B_C+0x64>)
 8000968:	6952      	ldr	r2, [r2, #20]
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	438a      	bics	r2, r1
 800096e:	615a      	str	r2, [r3, #20]
	COMP_A_PHASE;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <Bridge_B_C+0x68>)
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <Bridge_B_C+0x68>)
 8000974:	6812      	ldr	r2, [r2, #0]
 8000976:	2120      	movs	r1, #32
 8000978:	438a      	bics	r2, r1
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <Bridge_B_C+0x68>)
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <Bridge_B_C+0x68>)
 8000980:	6812      	ldr	r2, [r2, #0]
 8000982:	2110      	movs	r1, #16
 8000984:	430a      	orrs	r2, r1
 8000986:	601a      	str	r2, [r3, #0]
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	50000400 	.word	0x50000400
 8000994:	40010018 	.word	0x40010018

08000998 <Bridge_C_A>:

void Bridge_C_A(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	C_PHASE_ON;
 800099c:	23a0      	movs	r3, #160	; 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	22a0      	movs	r2, #160	; 0xa0
 80009a2:	05d2      	lsls	r2, r2, #23
 80009a4:	6952      	ldr	r2, [r2, #20]
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	0149      	lsls	r1, r1, #5
 80009aa:	430a      	orrs	r2, r1
 80009ac:	615a      	str	r2, [r3, #20]
	PWM_C_ON;
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	22fa      	movs	r2, #250	; 0xfa
 80009b4:	63da      	str	r2, [r3, #60]	; 0x3c
	A_PHASE_LOW_ON;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <Bridge_C_A+0x60>)
 80009b8:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <Bridge_C_A+0x60>)
 80009ba:	6952      	ldr	r2, [r2, #20]
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	430a      	orrs	r2, r1
 80009c0:	615a      	str	r2, [r3, #20]
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	2200      	movs	r2, #0
 80009c8:	635a      	str	r2, [r3, #52]	; 0x34
	B_PHASE_OFF;
 80009ca:	23a0      	movs	r3, #160	; 0xa0
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	22a0      	movs	r2, #160	; 0xa0
 80009d0:	05d2      	lsls	r2, r2, #23
 80009d2:	6952      	ldr	r2, [r2, #20]
 80009d4:	4909      	ldr	r1, [pc, #36]	; (80009fc <Bridge_C_A+0x64>)
 80009d6:	400a      	ands	r2, r1
 80009d8:	615a      	str	r2, [r3, #20]
	COMP_B_PHASE;
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <Bridge_C_A+0x68>)
 80009dc:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <Bridge_C_A+0x68>)
 80009de:	6812      	ldr	r2, [r2, #0]
 80009e0:	2120      	movs	r1, #32
 80009e2:	430a      	orrs	r2, r1
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <Bridge_C_A+0x68>)
 80009e8:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <Bridge_C_A+0x68>)
 80009ea:	6812      	ldr	r2, [r2, #0]
 80009ec:	2110      	movs	r1, #16
 80009ee:	438a      	bics	r2, r1
 80009f0:	601a      	str	r2, [r3, #0]
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	50000400 	.word	0x50000400
 80009fc:	fffff7ff 	.word	0xfffff7ff
 8000a00:	40010018 	.word	0x40010018

08000a04 <Bridge_A_C>:

void Bridge_A_C(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	A_PHASE_ON;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <Bridge_A_C+0x60>)
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <Bridge_A_C+0x60>)
 8000a0c:	6952      	ldr	r2, [r2, #20]
 8000a0e:	2180      	movs	r1, #128	; 0x80
 8000a10:	430a      	orrs	r2, r1
 8000a12:	615a      	str	r2, [r3, #20]
	PWM_A_ON;
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	22fa      	movs	r2, #250	; 0xfa
 8000a1a:	635a      	str	r2, [r3, #52]	; 0x34
	C_PHASE_LOW_ON;
 8000a1c:	23a0      	movs	r3, #160	; 0xa0
 8000a1e:	05db      	lsls	r3, r3, #23
 8000a20:	22a0      	movs	r2, #160	; 0xa0
 8000a22:	05d2      	lsls	r2, r2, #23
 8000a24:	6952      	ldr	r2, [r2, #20]
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	0149      	lsls	r1, r1, #5
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	615a      	str	r2, [r3, #20]
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	2200      	movs	r2, #0
 8000a34:	63da      	str	r2, [r3, #60]	; 0x3c
	B_PHASE_OFF;
 8000a36:	23a0      	movs	r3, #160	; 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	22a0      	movs	r2, #160	; 0xa0
 8000a3c:	05d2      	lsls	r2, r2, #23
 8000a3e:	6952      	ldr	r2, [r2, #20]
 8000a40:	4909      	ldr	r1, [pc, #36]	; (8000a68 <Bridge_A_C+0x64>)
 8000a42:	400a      	ands	r2, r1
 8000a44:	615a      	str	r2, [r3, #20]
	COMP_B_PHASE;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <Bridge_A_C+0x68>)
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <Bridge_A_C+0x68>)
 8000a4a:	6812      	ldr	r2, [r2, #0]
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <Bridge_A_C+0x68>)
 8000a54:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <Bridge_A_C+0x68>)
 8000a56:	6812      	ldr	r2, [r2, #0]
 8000a58:	2110      	movs	r1, #16
 8000a5a:	438a      	bics	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]
}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	50000400 	.word	0x50000400
 8000a68:	fffff7ff 	.word	0xfffff7ff
 8000a6c:	40010018 	.word	0x40010018

08000a70 <Bridge_C_B>:

void Bridge_C_B(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	C_PHASE_ON;
 8000a74:	23a0      	movs	r3, #160	; 0xa0
 8000a76:	05db      	lsls	r3, r3, #23
 8000a78:	22a0      	movs	r2, #160	; 0xa0
 8000a7a:	05d2      	lsls	r2, r2, #23
 8000a7c:	6952      	ldr	r2, [r2, #20]
 8000a7e:	2180      	movs	r1, #128	; 0x80
 8000a80:	0149      	lsls	r1, r1, #5
 8000a82:	430a      	orrs	r2, r1
 8000a84:	615a      	str	r2, [r3, #20]
	PWM_C_ON;
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	22fa      	movs	r2, #250	; 0xfa
 8000a8c:	63da      	str	r2, [r3, #60]	; 0x3c
	B_PHASE_LOW_ON;
 8000a8e:	23a0      	movs	r3, #160	; 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	22a0      	movs	r2, #160	; 0xa0
 8000a94:	05d2      	lsls	r2, r2, #23
 8000a96:	6952      	ldr	r2, [r2, #20]
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	0109      	lsls	r1, r1, #4
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	639a      	str	r2, [r3, #56]	; 0x38
	A_PHASE_OFF;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <Bridge_C_B+0x64>)
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <Bridge_C_B+0x64>)
 8000aac:	6952      	ldr	r2, [r2, #20]
 8000aae:	2180      	movs	r1, #128	; 0x80
 8000ab0:	438a      	bics	r2, r1
 8000ab2:	615a      	str	r2, [r3, #20]
	COMP_A_PHASE;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <Bridge_C_B+0x68>)
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <Bridge_C_B+0x68>)
 8000ab8:	6812      	ldr	r2, [r2, #0]
 8000aba:	2120      	movs	r1, #32
 8000abc:	438a      	bics	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <Bridge_C_B+0x68>)
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <Bridge_C_B+0x68>)
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	50000400 	.word	0x50000400
 8000ad8:	40010018 	.word	0x40010018

08000adc <Bridge_B_A>:

void Bridge_B_A(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	B_PHASE_ON;
 8000ae0:	23a0      	movs	r3, #160	; 0xa0
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	22a0      	movs	r2, #160	; 0xa0
 8000ae6:	05d2      	lsls	r2, r2, #23
 8000ae8:	6952      	ldr	r2, [r2, #20]
 8000aea:	2180      	movs	r1, #128	; 0x80
 8000aec:	0109      	lsls	r1, r1, #4
 8000aee:	430a      	orrs	r2, r1
 8000af0:	615a      	str	r2, [r3, #20]
	PWM_B_ON;
 8000af2:	2380      	movs	r3, #128	; 0x80
 8000af4:	05db      	lsls	r3, r3, #23
 8000af6:	22fa      	movs	r2, #250	; 0xfa
 8000af8:	639a      	str	r2, [r3, #56]	; 0x38
	A_PHASE_LOW_ON;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <Bridge_B_A+0x60>)
 8000afc:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <Bridge_B_A+0x60>)
 8000afe:	6952      	ldr	r2, [r2, #20]
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	430a      	orrs	r2, r1
 8000b04:	615a      	str	r2, [r3, #20]
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	05db      	lsls	r3, r3, #23
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
	C_PHASE_OFF;
 8000b0e:	23a0      	movs	r3, #160	; 0xa0
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	22a0      	movs	r2, #160	; 0xa0
 8000b14:	05d2      	lsls	r2, r2, #23
 8000b16:	6952      	ldr	r2, [r2, #20]
 8000b18:	4909      	ldr	r1, [pc, #36]	; (8000b40 <Bridge_B_A+0x64>)
 8000b1a:	400a      	ands	r2, r1
 8000b1c:	615a      	str	r2, [r3, #20]
	COMP_C_PHASE;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <Bridge_B_A+0x68>)
 8000b20:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <Bridge_B_A+0x68>)
 8000b22:	6812      	ldr	r2, [r2, #0]
 8000b24:	2120      	movs	r1, #32
 8000b26:	430a      	orrs	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <Bridge_B_A+0x68>)
 8000b2c:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <Bridge_B_A+0x68>)
 8000b2e:	6812      	ldr	r2, [r2, #0]
 8000b30:	2110      	movs	r1, #16
 8000b32:	430a      	orrs	r2, r1
 8000b34:	601a      	str	r2, [r3, #0]
}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	50000400 	.word	0x50000400
 8000b40:	ffffefff 	.word	0xffffefff
 8000b44:	40010018 	.word	0x40010018

08000b48 <Change_Phase>:

// Change Phase
void Change_Phase(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	switch(Current_State)
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <Change_Phase+0x94>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b06      	cmp	r3, #6
 8000b52:	d828      	bhi.n	8000ba6 <Change_Phase+0x5e>
 8000b54:	009a      	lsls	r2, r3, #2
 8000b56:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <Change_Phase+0x98>)
 8000b58:	18d3      	adds	r3, r2, r3
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	469f      	mov	pc, r3
	{
		case 1: Current_State = 2; Bridge_A_B(); break;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <Change_Phase+0x94>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	f7ff feac 	bl	80008c0 <Bridge_A_B>
 8000b68:	e034      	b.n	8000bd4 <Change_Phase+0x8c>
		case 2: Current_State = 3; Bridge_A_C(); break;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <Change_Phase+0x94>)
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	f7ff ff48 	bl	8000a04 <Bridge_A_C>
 8000b74:	e02e      	b.n	8000bd4 <Change_Phase+0x8c>
		case 3: Current_State = 4; Bridge_B_C(); break;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <Change_Phase+0x94>)
 8000b78:	2204      	movs	r2, #4
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	f7ff fed6 	bl	800092c <Bridge_B_C>
 8000b80:	e028      	b.n	8000bd4 <Change_Phase+0x8c>
		case 4: Current_State = 5; Bridge_B_A(); break;
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <Change_Phase+0x94>)
 8000b84:	2205      	movs	r2, #5
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	f7ff ffa8 	bl	8000adc <Bridge_B_A>
 8000b8c:	e022      	b.n	8000bd4 <Change_Phase+0x8c>
		case 5: Current_State = 6; Bridge_C_A(); break;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <Change_Phase+0x94>)
 8000b90:	2206      	movs	r2, #6
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	f7ff ff00 	bl	8000998 <Bridge_C_A>
 8000b98:	e01c      	b.n	8000bd4 <Change_Phase+0x8c>
		case 6: Current_State = 1; Bridge_C_B(); break;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <Change_Phase+0x94>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	f7ff ff66 	bl	8000a70 <Bridge_C_B>
 8000ba4:	e016      	b.n	8000bd4 <Change_Phase+0x8c>
		default: SHUTDOWN; break;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <Change_Phase+0x9c>)
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <Change_Phase+0x9c>)
 8000baa:	6952      	ldr	r2, [r2, #20]
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	438a      	bics	r2, r1
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	23a0      	movs	r3, #160	; 0xa0
 8000bb4:	05db      	lsls	r3, r3, #23
 8000bb6:	22a0      	movs	r2, #160	; 0xa0
 8000bb8:	05d2      	lsls	r2, r2, #23
 8000bba:	6952      	ldr	r2, [r2, #20]
 8000bbc:	490a      	ldr	r1, [pc, #40]	; (8000be8 <Change_Phase+0xa0>)
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	615a      	str	r2, [r3, #20]
 8000bc2:	23a0      	movs	r3, #160	; 0xa0
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	22a0      	movs	r2, #160	; 0xa0
 8000bc8:	05d2      	lsls	r2, r2, #23
 8000bca:	6952      	ldr	r2, [r2, #20]
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <Change_Phase+0xa4>)
 8000bce:	400a      	ands	r2, r1
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	46c0      	nop			; (mov r8, r8)
	}
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	20000020 	.word	0x20000020
 8000be0:	0800104c 	.word	0x0800104c
 8000be4:	50000400 	.word	0x50000400
 8000be8:	fffff7ff 	.word	0xfffff7ff
 8000bec:	ffffefff 	.word	0xffffefff

08000bf0 <ADC1_COMP_IRQHandler>:

void ADC1_COMP_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	/* Change ENABLE Phase */
	/* Rewrite Status Flag */
	LD3_TOGGLE;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <ADC1_COMP_IRQHandler+0x1c>)
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <ADC1_COMP_IRQHandler+0x1c>)
 8000bf8:	6952      	ldr	r2, [r2, #20]
 8000bfa:	2108      	movs	r1, #8
 8000bfc:	404a      	eors	r2, r1
 8000bfe:	615a      	str	r2, [r3, #20]
	Change_Phase();
 8000c00:	f7ff ffa2 	bl	8000b48 <Change_Phase>
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	50000400 	.word	0x50000400

08000c10 <TIM2_Init>:
 *             C-Phase < -Channel 3- > PA2    <A7>
 *   @param    Prescale
 *   @retvalue None
 */
void TIM2_Init(uint16_t PSC, uint16_t ARR)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	1dbb      	adds	r3, r7, #6
 8000c1a:	801a      	strh	r2, [r3, #0]
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	1c0a      	adds	r2, r1, #0
 8000c20:	801a      	strh	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;     // ENABLE TIM2 Clock
 8000c22:	4b87      	ldr	r3, [pc, #540]	; (8000e40 <TIM2_Init+0x230>)
 8000c24:	4a86      	ldr	r2, [pc, #536]	; (8000e40 <TIM2_Init+0x230>)
 8000c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000c28:	2101      	movs	r1, #1
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	639a      	str	r2, [r3, #56]	; 0x38
	/* Time Base Init*/
	TIM2->PSC = PSC;                        // Set PreScale Value
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	1dba      	adds	r2, r7, #6
 8000c34:	8812      	ldrh	r2, [r2, #0]
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = ARR;                        // Set Auto Reload Value
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	05db      	lsls	r3, r3, #23
 8000c3c:	1d3a      	adds	r2, r7, #4
 8000c3e:	8812      	ldrh	r2, [r2, #0]
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 &= ~(0x03 << 8);              // No Division
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	05d2      	lsls	r2, r2, #23
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	497d      	ldr	r1, [pc, #500]	; (8000e44 <TIM2_Init+0x234>)
 8000c4e:	400a      	ands	r2, r1
 8000c50:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= TIM_CR1_ARPE;              // ENABLE APRE
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	05d2      	lsls	r2, r2, #23
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]
	TIM2->CR1 &= ~(TIM_CR1_DIR);            // Counter Up
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	05d2      	lsls	r2, r2, #23
 8000c6a:	6812      	ldr	r2, [r2, #0]
 8000c6c:	2110      	movs	r1, #16
 8000c6e:	438a      	bics	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]
	TIM2->CR1 &= ~(0x03 << 5);              // Edge Align Mode
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	05d2      	lsls	r2, r2, #23
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	2160      	movs	r1, #96	; 0x60
 8000c7e:	438a      	bics	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
	TIM2->CR1 &= ~(1 << 3);                 // Pulses Mode
 8000c82:	2380      	movs	r3, #128	; 0x80
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	05d2      	lsls	r2, r2, #23
 8000c8a:	6812      	ldr	r2, [r2, #0]
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	438a      	bics	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
	/* Output Compare Channel 1~3 Init */
	// Channel 1
	TIM2->CCMR1 &= ~(0x07);                 // CC1 Output Normal
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	05d2      	lsls	r2, r2, #23
 8000c9a:	6992      	ldr	r2, [r2, #24]
 8000c9c:	2107      	movs	r1, #7
 8000c9e:	438a      	bics	r2, r1
 8000ca0:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE;         // Update Value ON Event
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	05db      	lsls	r3, r3, #23
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	05d2      	lsls	r2, r2, #23
 8000caa:	6992      	ldr	r2, [r2, #24]
 8000cac:	2108      	movs	r1, #8
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= 0x60;                    // PWM Mode 1
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	05db      	lsls	r3, r3, #23
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	05d2      	lsls	r2, r2, #23
 8000cba:	6992      	ldr	r2, [r2, #24]
 8000cbc:	2160      	movs	r1, #96	; 0x60
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	619a      	str	r2, [r3, #24]
	TIM2->CCER  &= ~TIM_CCER_CC1P;           // Active High
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	05db      	lsls	r3, r3, #23
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	05d2      	lsls	r2, r2, #23
 8000cca:	6a12      	ldr	r2, [r2, #32]
 8000ccc:	2102      	movs	r1, #2
 8000cce:	438a      	bics	r2, r1
 8000cd0:	621a      	str	r2, [r3, #32]
	// Channel 2
	TIM2->CCMR1 &= ~(0x07 << 8);            // CC2 Output Normal
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	05db      	lsls	r3, r3, #23
 8000cd6:	2280      	movs	r2, #128	; 0x80
 8000cd8:	05d2      	lsls	r2, r2, #23
 8000cda:	6992      	ldr	r2, [r2, #24]
 8000cdc:	495a      	ldr	r1, [pc, #360]	; (8000e48 <TIM2_Init+0x238>)
 8000cde:	400a      	ands	r2, r1
 8000ce0:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2PE;         // Update when UEV
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	05db      	lsls	r3, r3, #23
 8000ce6:	2280      	movs	r2, #128	; 0x80
 8000ce8:	05d2      	lsls	r2, r2, #23
 8000cea:	6992      	ldr	r2, [r2, #24]
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	0109      	lsls	r1, r1, #4
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= 0x6000;                  // PWM Mode 1
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	05db      	lsls	r3, r3, #23
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	05d2      	lsls	r2, r2, #23
 8000cfc:	6992      	ldr	r2, [r2, #24]
 8000cfe:	21c0      	movs	r1, #192	; 0xc0
 8000d00:	01c9      	lsls	r1, r1, #7
 8000d02:	430a      	orrs	r2, r1
 8000d04:	619a      	str	r2, [r3, #24]
	TIM2->CCER  &= ~TIM_CCER_CC2P;           // Active High
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	05db      	lsls	r3, r3, #23
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	05d2      	lsls	r2, r2, #23
 8000d0e:	6a12      	ldr	r2, [r2, #32]
 8000d10:	2120      	movs	r1, #32
 8000d12:	438a      	bics	r2, r1
 8000d14:	621a      	str	r2, [r3, #32]
	// Channel 3
	TIM2->CCMR2 &= ~(0x07);                 // CC3 Output Normal
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	05d2      	lsls	r2, r2, #23
 8000d1e:	69d2      	ldr	r2, [r2, #28]
 8000d20:	2107      	movs	r1, #7
 8000d22:	438a      	bics	r2, r1
 8000d24:	61da      	str	r2, [r3, #28]
	TIM2->CCMR2 |= TIM_CCMR2_OC3PE;         // Update when UEV
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	05db      	lsls	r3, r3, #23
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	05d2      	lsls	r2, r2, #23
 8000d2e:	69d2      	ldr	r2, [r2, #28]
 8000d30:	2108      	movs	r1, #8
 8000d32:	430a      	orrs	r2, r1
 8000d34:	61da      	str	r2, [r3, #28]
	TIM2->CCMR2 |= 0x60;                    // PWM Mode 1
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	05db      	lsls	r3, r3, #23
 8000d3a:	2280      	movs	r2, #128	; 0x80
 8000d3c:	05d2      	lsls	r2, r2, #23
 8000d3e:	69d2      	ldr	r2, [r2, #28]
 8000d40:	2160      	movs	r1, #96	; 0x60
 8000d42:	430a      	orrs	r2, r1
 8000d44:	61da      	str	r2, [r3, #28]
	TIM2->CCER  &= ~TIM_CCER_CC3P;         // Active High
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	05d2      	lsls	r2, r2, #23
 8000d4e:	6a12      	ldr	r2, [r2, #32]
 8000d50:	493e      	ldr	r1, [pc, #248]	; (8000e4c <TIM2_Init+0x23c>)
 8000d52:	400a      	ands	r2, r1
 8000d54:	621a      	str	r2, [r3, #32]
	/* GPIO Init */
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;      // ENABLE GPIOA Clock
 8000d56:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <TIM2_Init+0x230>)
 8000d58:	4a39      	ldr	r2, [pc, #228]	; (8000e40 <TIM2_Init+0x230>)
 8000d5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOA->MODER |= (1 << 17) | (1 << 5);   // PA2 PA8 AF
 8000d62:	23a0      	movs	r3, #160	; 0xa0
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	22a0      	movs	r2, #160	; 0xa0
 8000d68:	05d2      	lsls	r2, r2, #23
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	4938      	ldr	r1, [pc, #224]	; (8000e50 <TIM2_Init+0x240>)
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~((1 << 16) | (1 << 4));
 8000d72:	23a0      	movs	r3, #160	; 0xa0
 8000d74:	05db      	lsls	r3, r3, #23
 8000d76:	22a0      	movs	r2, #160	; 0xa0
 8000d78:	05d2      	lsls	r2, r2, #23
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	4935      	ldr	r1, [pc, #212]	; (8000e54 <TIM2_Init+0x244>)
 8000d7e:	400a      	ands	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~((1 << 2) | (1 << 8));// PA2 PA8 PP
 8000d82:	23a0      	movs	r3, #160	; 0xa0
 8000d84:	05db      	lsls	r3, r3, #23
 8000d86:	22a0      	movs	r2, #160	; 0xa0
 8000d88:	05d2      	lsls	r2, r2, #23
 8000d8a:	6852      	ldr	r2, [r2, #4]
 8000d8c:	4932      	ldr	r1, [pc, #200]	; (8000e58 <TIM2_Init+0x248>)
 8000d8e:	400a      	ands	r2, r1
 8000d90:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= (0x03 << 4) | (0x03 << 16);
 8000d92:	23a0      	movs	r3, #160	; 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	22a0      	movs	r2, #160	; 0xa0
 8000d98:	05d2      	lsls	r2, r2, #23
 8000d9a:	6892      	ldr	r2, [r2, #8]
 8000d9c:	492f      	ldr	r1, [pc, #188]	; (8000e5c <TIM2_Init+0x24c>)
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	609a      	str	r2, [r3, #8]
	 	 	 	 	 	 	 	 	 	 	//PA2 PA8 High Speed
	GPIOA->PUPDR |= (1 << 16) | (1 << 4);
 8000da2:	23a0      	movs	r3, #160	; 0xa0
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	22a0      	movs	r2, #160	; 0xa0
 8000da8:	05d2      	lsls	r2, r2, #23
 8000daa:	68d2      	ldr	r2, [r2, #12]
 8000dac:	492c      	ldr	r1, [pc, #176]	; (8000e60 <TIM2_Init+0x250>)
 8000dae:	430a      	orrs	r2, r1
 8000db0:	60da      	str	r2, [r3, #12]
//	GPIOA->PUPDR &= ~((1 << 17) | (1 << 5));// PA2 PA8 Pull-Up
	GPIOA->AFR[0] |= 0x00000200;            // PA2 <--> TIM2_CH3
 8000db2:	23a0      	movs	r3, #160	; 0xa0
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	22a0      	movs	r2, #160	; 0xa0
 8000db8:	05d2      	lsls	r2, r2, #23
 8000dba:	6a12      	ldr	r2, [r2, #32]
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	0089      	lsls	r1, r1, #2
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[1] |= 0x00000005;            // PA8 <--> TIM2_CH1
 8000dc4:	23a0      	movs	r3, #160	; 0xa0
 8000dc6:	05db      	lsls	r3, r3, #23
 8000dc8:	22a0      	movs	r2, #160	; 0xa0
 8000dca:	05d2      	lsls	r2, r2, #23
 8000dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000dce:	2105      	movs	r1, #5
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
	RCC->IOPENR  |= RCC_IOPENR_GPIOBEN;     // ENABLE GPIOB Clock
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <TIM2_Init+0x230>)
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	; (8000e40 <TIM2_Init+0x230>)
 8000dd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000dda:	2102      	movs	r1, #2
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOB->MODER  |= (1 << 1);
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <TIM2_Init+0x254>)
 8000de2:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <TIM2_Init+0x254>)
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	2102      	movs	r1, #2
 8000de8:	430a      	orrs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  &= ~0x01;                 // GPIOB0 AF
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <TIM2_Init+0x254>)
 8000dee:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <TIM2_Init+0x254>)
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	2101      	movs	r1, #1
 8000df4:	438a      	bics	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~0x01;                 // GPIOB0 PP
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <TIM2_Init+0x254>)
 8000dfa:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <TIM2_Init+0x254>)
 8000dfc:	6852      	ldr	r2, [r2, #4]
 8000dfe:	2101      	movs	r1, #1
 8000e00:	438a      	bics	r2, r1
 8000e02:	605a      	str	r2, [r3, #4]
	GPIOB->OSPEEDR|= 0x03;                  // GPIOB0 Very High
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <TIM2_Init+0x254>)
 8000e06:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <TIM2_Init+0x254>)
 8000e08:	6892      	ldr	r2, [r2, #8]
 8000e0a:	2103      	movs	r1, #3
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	609a      	str	r2, [r3, #8]
	GPIOB->PUPDR  |= 0x01;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <TIM2_Init+0x254>)
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <TIM2_Init+0x254>)
 8000e14:	68d2      	ldr	r2, [r2, #12]
 8000e16:	2101      	movs	r1, #1
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	60da      	str	r2, [r3, #12]
//	GPIOB->PUPDR  &= ~(1 << 1);             // GPIOB0 Pull-Up
	GPIOB->AFR[0] |= 0x2;                   // GPIOB0 TIM2_CH2
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <TIM2_Init+0x254>)
 8000e1e:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <TIM2_Init+0x254>)
 8000e20:	6a12      	ldr	r2, [r2, #32]
 8000e22:	2102      	movs	r1, #2
 8000e24:	430a      	orrs	r2, r1
 8000e26:	621a      	str	r2, [r3, #32]

	TIM2->CR1 |= 0x01;                      // ENABLE TIM2
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	05db      	lsls	r3, r3, #23
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	05d2      	lsls	r2, r2, #23
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	2101      	movs	r1, #1
 8000e34:	430a      	orrs	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b002      	add	sp, #8
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	fffffcff 	.word	0xfffffcff
 8000e48:	fffff8ff 	.word	0xfffff8ff
 8000e4c:	fffffdff 	.word	0xfffffdff
 8000e50:	00020020 	.word	0x00020020
 8000e54:	fffeffef 	.word	0xfffeffef
 8000e58:	fffffefb 	.word	0xfffffefb
 8000e5c:	00030030 	.word	0x00030030
 8000e60:	00010010 	.word	0x00010010
 8000e64:	50000400 	.word	0x50000400

08000e68 <TIM2_PWM_Start>:

void TIM2_PWM_Start(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	TIM2->CNT = 0x00;
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	05db      	lsls	r3, r3, #23
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E);
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	05db      	lsls	r3, r3, #23
 8000e78:	2280      	movs	r2, #128	; 0x80
 8000e7a:	05d2      	lsls	r2, r2, #23
 8000e7c:	6a12      	ldr	r2, [r2, #32]
 8000e7e:	2112      	movs	r1, #18
 8000e80:	31ff      	adds	r1, #255	; 0xff
 8000e82:	430a      	orrs	r2, r1
 8000e84:	621a      	str	r2, [r3, #32]
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <main>:
uint8_t Current_State = 0;

void SysTick_Init(uint32_t LOAD);

int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	SysTick_Init(50000);
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <main+0x30>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 f818 	bl	8000ec8 <SysTick_Init>
	LED_Init();
 8000e98:	f7ff fb68 	bl	800056c <LED_Init>

	GPIO_SDx_Init();
 8000e9c:	f7ff fc8c 	bl	80007b8 <GPIO_SDx_Init>
	COMP1_Init();
 8000ea0:	f7ff fc3a 	bl	8000718 <COMP1_Init>

	TIM2_Init(1, 999);
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <main+0x34>)
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff feb1 	bl	8000c10 <TIM2_Init>
	TIM2_PWM_Start();
 8000eae:	f7ff ffdb 	bl	8000e68 <TIM2_PWM_Start>

	Current_State = 1;
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <main+0x38>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]

	while(1);
 8000eb8:	e7fe      	b.n	8000eb8 <main+0x2c>
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	0000c350 	.word	0x0000c350
 8000ec0:	000003e7 	.word	0x000003e7
 8000ec4:	20000020 	.word	0x20000020

08000ec8 <SysTick_Init>:
}

// Init Systick Timer
void SysTick_Init(uint32_t LOAD)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	SysTick->VAL  &= 0x00000000;       //  Reset Value
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <SysTick_Init+0x2c>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <SysTick_Init+0x2c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
	SysTick->LOAD  = LOAD;             //  SysTick Freq
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <SysTick_Init+0x2c>)
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	605a      	str	r2, [r3, #4]
    SysTick->CTRL |= 0x00000007;       //  SysTick ENABLE IRQ, CLK = SYS_CLK / 8
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Init+0x2c>)
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <SysTick_Init+0x2c>)
 8000ee4:	6812      	ldr	r2, [r2, #0]
 8000ee6:	2107      	movs	r1, #7
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	/*
	 * Place Holder For SysTick Handler
	 */
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f04:	4813      	ldr	r0, [pc, #76]	; (8000f54 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f06:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000f08:	2004      	movs	r0, #4
    LDR R1, [R0]
 8000f0a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000f0c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000f0e:	221f      	movs	r2, #31
    CMP R1, R2
 8000f10:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000f12:	d105      	bne.n	8000f20 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000f14:	4810      	ldr	r0, [pc, #64]	; (8000f58 <LoopForever+0x6>)
    LDR R1,=0x00000001
 8000f16:	2101      	movs	r1, #1
    STR R1, [R0]
 8000f18:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000f1a:	4810      	ldr	r0, [pc, #64]	; (8000f5c <LoopForever+0xa>)
    LDR R1,=0x00000000
 8000f1c:	2100      	movs	r1, #0
    STR R1, [R0]
 8000f1e:	6001      	str	r1, [r0, #0]

08000f20 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000f20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f22:	e003      	b.n	8000f2c <LoopCopyDataInit>

08000f24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  ldr  r3, [r3, r1]
 8000f26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f2a:	3104      	adds	r1, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <LoopForever+0x12>)
  ldr  r3, =_edata
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <LoopForever+0x16>)
  adds  r2, r0, r1
 8000f30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f34:	d3f6      	bcc.n	8000f24 <CopyDataInit>
  ldr  r2, =_sbss
 8000f36:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <LoopForever+0x1a>)
  b  LoopFillZerobss
 8000f38:	e002      	b.n	8000f40 <LoopFillZerobss>

08000f3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000f3a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f3c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3e:	3204      	adds	r2, #4

08000f40 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <LoopForever+0x1e>)
  cmp  r2, r3
 8000f42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f44:	d3f9      	bcc.n	8000f3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f46:	f000 f817 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f000 f84f 	bl	8000fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff ff9d 	bl	8000e8c <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
   ldr   r0, =_estack
 8000f54:	20000800 	.word	0x20000800
    LDR R0,=0x40021034
 8000f58:	40021034 	.word	0x40021034
    LDR R0,=0x40010000
 8000f5c:	40010000 	.word	0x40010000
  ldr  r3, =_sidata
 8000f60:	08001070 	.word	0x08001070
  ldr  r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f68:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000f6c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000f70:	20000024 	.word	0x20000024

08000f74 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <DMA1_Channel1_IRQHandler>
	...

08000f78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <SystemInit+0x5c>)
 8000f7e:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <SystemInit+0x5c>)
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	0049      	lsls	r1, r1, #1
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  // RCC->CFGR &= (uint32_t) 0x88FF400C;
  RCC->CFGR = (uint32_t) 0x0280000f;
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <SystemInit+0x5c>)
 8000f8c:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <SystemInit+0x60>)
 8000f8e:	60da      	str	r2, [r3, #12]
  // PLL

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR |= (1 << 24) | (1 << 0);
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <SystemInit+0x5c>)
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <SystemInit+0x5c>)
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	4911      	ldr	r1, [pc, #68]	; (8000fdc <SystemInit+0x64>)
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <SystemInit+0x5c>)
 8000f9e:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <SystemInit+0x5c>)
 8000fa0:	6892      	ldr	r2, [r2, #8]
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	438a      	bics	r2, r1
 8000fa6:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <SystemInit+0x5c>)
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SystemInit+0x5c>)
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <SystemInit+0x68>)
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <SystemInit+0x5c>)
 8000fb6:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <SystemInit+0x5c>)
 8000fb8:	68d2      	ldr	r2, [r2, #12]
 8000fba:	490a      	ldr	r1, [pc, #40]	; (8000fe4 <SystemInit+0x6c>)
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SystemInit+0x5c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <SystemInit+0x70>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	0512      	lsls	r2, r2, #20
 8000fcc:	609a      	str	r2, [r3, #8]
#endif
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	0280000f 	.word	0x0280000f
 8000fdc:	01000001 	.word	0x01000001
 8000fe0:	fffbffff 	.word	0xfffbffff
 8000fe4:	ff02ffff 	.word	0xff02ffff
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__libc_init_array>:
 8000fec:	b570      	push	{r4, r5, r6, lr}
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4d0c      	ldr	r5, [pc, #48]	; (8001024 <__libc_init_array+0x38>)
 8000ff2:	4c0d      	ldr	r4, [pc, #52]	; (8001028 <__libc_init_array+0x3c>)
 8000ff4:	1b64      	subs	r4, r4, r5
 8000ff6:	10a4      	asrs	r4, r4, #2
 8000ff8:	42a6      	cmp	r6, r4
 8000ffa:	d109      	bne.n	8001010 <__libc_init_array+0x24>
 8000ffc:	2600      	movs	r6, #0
 8000ffe:	f000 f819 	bl	8001034 <_init>
 8001002:	4d0a      	ldr	r5, [pc, #40]	; (800102c <__libc_init_array+0x40>)
 8001004:	4c0a      	ldr	r4, [pc, #40]	; (8001030 <__libc_init_array+0x44>)
 8001006:	1b64      	subs	r4, r4, r5
 8001008:	10a4      	asrs	r4, r4, #2
 800100a:	42a6      	cmp	r6, r4
 800100c:	d105      	bne.n	800101a <__libc_init_array+0x2e>
 800100e:	bd70      	pop	{r4, r5, r6, pc}
 8001010:	00b3      	lsls	r3, r6, #2
 8001012:	58eb      	ldr	r3, [r5, r3]
 8001014:	4798      	blx	r3
 8001016:	3601      	adds	r6, #1
 8001018:	e7ee      	b.n	8000ff8 <__libc_init_array+0xc>
 800101a:	00b3      	lsls	r3, r6, #2
 800101c:	58eb      	ldr	r3, [r5, r3]
 800101e:	4798      	blx	r3
 8001020:	3601      	adds	r6, #1
 8001022:	e7f2      	b.n	800100a <__libc_init_array+0x1e>
 8001024:	08001068 	.word	0x08001068
 8001028:	08001068 	.word	0x08001068
 800102c:	08001068 	.word	0x08001068
 8001030:	0800106c 	.word	0x0800106c

08001034 <_init>:
 8001034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800103a:	bc08      	pop	{r3}
 800103c:	469e      	mov	lr, r3
 800103e:	4770      	bx	lr

08001040 <_fini>:
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001046:	bc08      	pop	{r3}
 8001048:	469e      	mov	lr, r3
 800104a:	4770      	bx	lr
