
BLDC_Driver_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bdc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000c9c  08000c9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000cbc  08000cbc  00010cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  08000cc0  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000020  08000cc0  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010cc0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002042  00000000  00000000  00010ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000736  00000000  00000000  00012d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000178  00000000  00000000  00013460  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000135d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000c89  00000000  00000000  000136e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000a76  00000000  00000000  00014371  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00014de7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000354  00000000  00000000  00014e64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000c84 	.word	0x08000c84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000c84 	.word	0x08000c84

08000108 <LED_Init>:



// LD3 Init
void LED_Init(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	RCC->IOPENR   |= RCC_IOPENR_GPIOBEN;// ENABLE GPIOB Clock
 800010c:	4b13      	ldr	r3, [pc, #76]	; (800015c <LED_Init+0x54>)
 800010e:	4a13      	ldr	r2, [pc, #76]	; (800015c <LED_Init+0x54>)
 8000110:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000112:	2102      	movs	r1, #2
 8000114:	430a      	orrs	r2, r1
 8000116:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOB->MODER  |= (1 << 6);
 8000118:	4b11      	ldr	r3, [pc, #68]	; (8000160 <LED_Init+0x58>)
 800011a:	4a11      	ldr	r2, [pc, #68]	; (8000160 <LED_Init+0x58>)
 800011c:	6812      	ldr	r2, [r2, #0]
 800011e:	2140      	movs	r1, #64	; 0x40
 8000120:	430a      	orrs	r2, r1
 8000122:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  &= ~(1 << 7);         // LD3 Output
 8000124:	4b0e      	ldr	r3, [pc, #56]	; (8000160 <LED_Init+0x58>)
 8000126:	4a0e      	ldr	r2, [pc, #56]	; (8000160 <LED_Init+0x58>)
 8000128:	6812      	ldr	r2, [r2, #0]
 800012a:	2180      	movs	r1, #128	; 0x80
 800012c:	438a      	bics	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~(1 << 3);         // LD3 PP
 8000130:	4b0b      	ldr	r3, [pc, #44]	; (8000160 <LED_Init+0x58>)
 8000132:	4a0b      	ldr	r2, [pc, #44]	; (8000160 <LED_Init+0x58>)
 8000134:	6852      	ldr	r2, [r2, #4]
 8000136:	2108      	movs	r1, #8
 8000138:	438a      	bics	r2, r1
 800013a:	605a      	str	r2, [r3, #4]
	GPIOB->PUPDR  |= (1 << 6);
 800013c:	4b08      	ldr	r3, [pc, #32]	; (8000160 <LED_Init+0x58>)
 800013e:	4a08      	ldr	r2, [pc, #32]	; (8000160 <LED_Init+0x58>)
 8000140:	68d2      	ldr	r2, [r2, #12]
 8000142:	2140      	movs	r1, #64	; 0x40
 8000144:	430a      	orrs	r2, r1
 8000146:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR  &= ~(1 << 7);         // Pull-up
 8000148:	4b05      	ldr	r3, [pc, #20]	; (8000160 <LED_Init+0x58>)
 800014a:	4a05      	ldr	r2, [pc, #20]	; (8000160 <LED_Init+0x58>)
 800014c:	68d2      	ldr	r2, [r2, #12]
 800014e:	2180      	movs	r1, #128	; 0x80
 8000150:	438a      	bics	r2, r1
 8000152:	60da      	str	r2, [r3, #12]
}
 8000154:	46c0      	nop			; (mov r8, r8)
 8000156:	46bd      	mov	sp, r7
 8000158:	bd80      	pop	{r7, pc}
 800015a:	46c0      	nop			; (mov r8, r8)
 800015c:	40021000 	.word	0x40021000
 8000160:	50000400 	.word	0x50000400

08000164 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
 800016a:	0002      	movs	r2, r0
 800016c:	1dfb      	adds	r3, r7, #7
 800016e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8000170:	4b06      	ldr	r3, [pc, #24]	; (800018c <NVIC_EnableIRQ+0x28>)
 8000172:	1dfa      	adds	r2, r7, #7
 8000174:	7812      	ldrb	r2, [r2, #0]
 8000176:	0011      	movs	r1, r2
 8000178:	221f      	movs	r2, #31
 800017a:	400a      	ands	r2, r1
 800017c:	2101      	movs	r1, #1
 800017e:	4091      	lsls	r1, r2
 8000180:	000a      	movs	r2, r1
 8000182:	601a      	str	r2, [r3, #0]
}
 8000184:	46c0      	nop			; (mov r8, r8)
 8000186:	46bd      	mov	sp, r7
 8000188:	b002      	add	sp, #8
 800018a:	bd80      	pop	{r7, pc}
 800018c:	e000e100 	.word	0xe000e100

08000190 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	0002      	movs	r2, r0
 8000198:	6039      	str	r1, [r7, #0]
 800019a:	1dfb      	adds	r3, r7, #7
 800019c:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 800019e:	1dfb      	adds	r3, r7, #7
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b7f      	cmp	r3, #127	; 0x7f
 80001a4:	d932      	bls.n	800020c <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80001a6:	4c2f      	ldr	r4, [pc, #188]	; (8000264 <NVIC_SetPriority+0xd4>)
 80001a8:	1dfb      	adds	r3, r7, #7
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	001a      	movs	r2, r3
 80001ae:	230f      	movs	r3, #15
 80001b0:	4013      	ands	r3, r2
 80001b2:	3b08      	subs	r3, #8
 80001b4:	0899      	lsrs	r1, r3, #2
 80001b6:	4a2b      	ldr	r2, [pc, #172]	; (8000264 <NVIC_SetPriority+0xd4>)
 80001b8:	1dfb      	adds	r3, r7, #7
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	0018      	movs	r0, r3
 80001be:	230f      	movs	r3, #15
 80001c0:	4003      	ands	r3, r0
 80001c2:	3b08      	subs	r3, #8
 80001c4:	089b      	lsrs	r3, r3, #2
 80001c6:	3306      	adds	r3, #6
 80001c8:	009b      	lsls	r3, r3, #2
 80001ca:	18d3      	adds	r3, r2, r3
 80001cc:	3304      	adds	r3, #4
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	1dfa      	adds	r2, r7, #7
 80001d2:	7812      	ldrb	r2, [r2, #0]
 80001d4:	0010      	movs	r0, r2
 80001d6:	2203      	movs	r2, #3
 80001d8:	4002      	ands	r2, r0
 80001da:	00d2      	lsls	r2, r2, #3
 80001dc:	20ff      	movs	r0, #255	; 0xff
 80001de:	4090      	lsls	r0, r2
 80001e0:	0002      	movs	r2, r0
 80001e2:	43d2      	mvns	r2, r2
 80001e4:	401a      	ands	r2, r3
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	019b      	lsls	r3, r3, #6
 80001ea:	20ff      	movs	r0, #255	; 0xff
 80001ec:	4018      	ands	r0, r3
 80001ee:	1dfb      	adds	r3, r7, #7
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	001d      	movs	r5, r3
 80001f4:	2303      	movs	r3, #3
 80001f6:	402b      	ands	r3, r5
 80001f8:	00db      	lsls	r3, r3, #3
 80001fa:	4098      	lsls	r0, r3
 80001fc:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80001fe:	431a      	orrs	r2, r3
 8000200:	1d8b      	adds	r3, r1, #6
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	18e3      	adds	r3, r4, r3
 8000206:	3304      	adds	r3, #4
 8000208:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 800020a:	e027      	b.n	800025c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800020c:	4c16      	ldr	r4, [pc, #88]	; (8000268 <NVIC_SetPriority+0xd8>)
 800020e:	1dfb      	adds	r3, r7, #7
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	b25b      	sxtb	r3, r3
 8000214:	089b      	lsrs	r3, r3, #2
 8000216:	4914      	ldr	r1, [pc, #80]	; (8000268 <NVIC_SetPriority+0xd8>)
 8000218:	1dfa      	adds	r2, r7, #7
 800021a:	7812      	ldrb	r2, [r2, #0]
 800021c:	b252      	sxtb	r2, r2
 800021e:	0892      	lsrs	r2, r2, #2
 8000220:	32c0      	adds	r2, #192	; 0xc0
 8000222:	0092      	lsls	r2, r2, #2
 8000224:	5852      	ldr	r2, [r2, r1]
 8000226:	1df9      	adds	r1, r7, #7
 8000228:	7809      	ldrb	r1, [r1, #0]
 800022a:	0008      	movs	r0, r1
 800022c:	2103      	movs	r1, #3
 800022e:	4001      	ands	r1, r0
 8000230:	00c9      	lsls	r1, r1, #3
 8000232:	20ff      	movs	r0, #255	; 0xff
 8000234:	4088      	lsls	r0, r1
 8000236:	0001      	movs	r1, r0
 8000238:	43c9      	mvns	r1, r1
 800023a:	4011      	ands	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800023c:	683a      	ldr	r2, [r7, #0]
 800023e:	0192      	lsls	r2, r2, #6
 8000240:	20ff      	movs	r0, #255	; 0xff
 8000242:	4010      	ands	r0, r2
 8000244:	1dfa      	adds	r2, r7, #7
 8000246:	7812      	ldrb	r2, [r2, #0]
 8000248:	0015      	movs	r5, r2
 800024a:	2203      	movs	r2, #3
 800024c:	402a      	ands	r2, r5
 800024e:	00d2      	lsls	r2, r2, #3
 8000250:	4090      	lsls	r0, r2
 8000252:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000254:	430a      	orrs	r2, r1
 8000256:	33c0      	adds	r3, #192	; 0xc0
 8000258:	009b      	lsls	r3, r3, #2
 800025a:	511a      	str	r2, [r3, r4]
}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b002      	add	sp, #8
 8000262:	bdb0      	pop	{r4, r5, r7, pc}
 8000264:	e000ed00 	.word	0xe000ed00
 8000268:	e000e100 	.word	0xe000e100

0800026c <COMP1_Init>:
#include "COMP.h"
#include "stm32l011xx.h"
#include "stm32l0xx_hal_comp.h"

void COMP1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000270:	4b25      	ldr	r3, [pc, #148]	; (8000308 <COMP1_Init+0x9c>)
 8000272:	4a25      	ldr	r2, [pc, #148]	; (8000308 <COMP1_Init+0x9c>)
 8000274:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000276:	2101      	movs	r1, #1
 8000278:	430a      	orrs	r2, r1
 800027a:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR   |= RCC_IOPENR_GPIOAEN;
 800027c:	4b22      	ldr	r3, [pc, #136]	; (8000308 <COMP1_Init+0x9c>)
 800027e:	4a22      	ldr	r2, [pc, #136]	; (8000308 <COMP1_Init+0x9c>)
 8000280:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000282:	2101      	movs	r1, #1
 8000284:	430a      	orrs	r2, r1
 8000286:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOA->MODER  |= 0x00000f0f;         // PA0, PA1, PA4, PA5, Analog Mode
 8000288:	23a0      	movs	r3, #160	; 0xa0
 800028a:	05db      	lsls	r3, r3, #23
 800028c:	22a0      	movs	r2, #160	; 0xa0
 800028e:	05d2      	lsls	r2, r2, #23
 8000290:	6812      	ldr	r2, [r2, #0]
 8000292:	491e      	ldr	r1, [pc, #120]	; (800030c <COMP1_Init+0xa0>)
 8000294:	430a      	orrs	r2, r1
 8000296:	601a      	str	r2, [r3, #0]

	EXTI->EMR  |= (1 << 21);
 8000298:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <COMP1_Init+0xa4>)
 800029a:	4a1d      	ldr	r2, [pc, #116]	; (8000310 <COMP1_Init+0xa4>)
 800029c:	6852      	ldr	r2, [r2, #4]
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	0389      	lsls	r1, r1, #14
 80002a2:	430a      	orrs	r2, r1
 80002a4:	605a      	str	r2, [r3, #4]
	EXTI->IMR  |= (1 << 21);
 80002a6:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <COMP1_Init+0xa4>)
 80002a8:	4a19      	ldr	r2, [pc, #100]	; (8000310 <COMP1_Init+0xa4>)
 80002aa:	6812      	ldr	r2, [r2, #0]
 80002ac:	2180      	movs	r1, #128	; 0x80
 80002ae:	0389      	lsls	r1, r1, #14
 80002b0:	430a      	orrs	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
	EXTI->FTSR |= (1 << 21);
 80002b4:	4b16      	ldr	r3, [pc, #88]	; (8000310 <COMP1_Init+0xa4>)
 80002b6:	4a16      	ldr	r2, [pc, #88]	; (8000310 <COMP1_Init+0xa4>)
 80002b8:	68d2      	ldr	r2, [r2, #12]
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	0389      	lsls	r1, r1, #14
 80002be:	430a      	orrs	r2, r1
 80002c0:	60da      	str	r2, [r3, #12]

	COMP1->CSR &= ~((1 << 15) | (1 << 12) | (1 << 8));
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <COMP1_Init+0xa8>)
 80002c4:	4a13      	ldr	r2, [pc, #76]	; (8000314 <COMP1_Init+0xa8>)
 80002c6:	6812      	ldr	r2, [r2, #0]
 80002c8:	4913      	ldr	r1, [pc, #76]	; (8000318 <COMP1_Init+0xac>)
 80002ca:	400a      	ands	r2, r1
 80002cc:	601a      	str	r2, [r3, #0]
	COMP_A_PHASE;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <COMP1_Init+0xa8>)
 80002d0:	4a10      	ldr	r2, [pc, #64]	; (8000314 <COMP1_Init+0xa8>)
 80002d2:	6812      	ldr	r2, [r2, #0]
 80002d4:	2120      	movs	r1, #32
 80002d6:	438a      	bics	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <COMP1_Init+0xa8>)
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <COMP1_Init+0xa8>)
 80002de:	6812      	ldr	r2, [r2, #0]
 80002e0:	2110      	movs	r1, #16
 80002e2:	430a      	orrs	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80002e6:	200c      	movs	r0, #12
 80002e8:	f7ff ff3c 	bl	8000164 <NVIC_EnableIRQ>
	NVIC_SetPriority(ADC1_COMP_IRQn, 0);
 80002ec:	2100      	movs	r1, #0
 80002ee:	200c      	movs	r0, #12
 80002f0:	f7ff ff4e 	bl	8000190 <NVIC_SetPriority>
	COMP1->CSR |= 0x01;
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <COMP1_Init+0xa8>)
 80002f6:	4a07      	ldr	r2, [pc, #28]	; (8000314 <COMP1_Init+0xa8>)
 80002f8:	6812      	ldr	r2, [r2, #0]
 80002fa:	2101      	movs	r1, #1
 80002fc:	430a      	orrs	r2, r1
 80002fe:	601a      	str	r2, [r3, #0]
}
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	40021000 	.word	0x40021000
 800030c:	00000f0f 	.word	0x00000f0f
 8000310:	40010400 	.word	0x40010400
 8000314:	40010018 	.word	0x40010018
 8000318:	ffff6eff 	.word	0xffff6eff

0800031c <delay>:
 *   SD2 < -- > PA11  <D10>
 *   SD3 < -- > PA12  <D2>
 */

void delay(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
	uint16_t i=0xfff;
 8000322:	1dbb      	adds	r3, r7, #6
 8000324:	4a06      	ldr	r2, [pc, #24]	; (8000340 <delay+0x24>)
 8000326:	801a      	strh	r2, [r3, #0]
	while(i--);
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	1dbb      	adds	r3, r7, #6
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	1dba      	adds	r2, r7, #6
 8000330:	1e59      	subs	r1, r3, #1
 8000332:	8011      	strh	r1, [r2, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1f8      	bne.n	800032a <delay+0xe>
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b002      	add	sp, #8
 800033e:	bd80      	pop	{r7, pc}
 8000340:	00000fff 	.word	0x00000fff

08000344 <GPIO_SDx_Init>:

void GPIO_SDx_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	/* GPIOB / GPIOC Init */
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;          // ENABLE GPIOA Clock
 8000348:	4b37      	ldr	r3, [pc, #220]	; (8000428 <GPIO_SDx_Init+0xe4>)
 800034a:	4a37      	ldr	r2, [pc, #220]	; (8000428 <GPIO_SDx_Init+0xe4>)
 800034c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800034e:	2101      	movs	r1, #1
 8000350:	430a      	orrs	r2, r1
 8000352:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;          // ENABLE GPIOB Clock
 8000354:	4b34      	ldr	r3, [pc, #208]	; (8000428 <GPIO_SDx_Init+0xe4>)
 8000356:	4a34      	ldr	r2, [pc, #208]	; (8000428 <GPIO_SDx_Init+0xe4>)
 8000358:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800035a:	2102      	movs	r1, #2
 800035c:	430a      	orrs	r2, r1
 800035e:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOB->MODER |= (1 << 14);
 8000360:	4b32      	ldr	r3, [pc, #200]	; (800042c <GPIO_SDx_Init+0xe8>)
 8000362:	4a32      	ldr	r2, [pc, #200]	; (800042c <GPIO_SDx_Init+0xe8>)
 8000364:	6812      	ldr	r2, [r2, #0]
 8000366:	2180      	movs	r1, #128	; 0x80
 8000368:	01c9      	lsls	r1, r1, #7
 800036a:	430a      	orrs	r2, r1
 800036c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1 << 15);                 // GPIOB7 Output
 800036e:	4b2f      	ldr	r3, [pc, #188]	; (800042c <GPIO_SDx_Init+0xe8>)
 8000370:	4a2e      	ldr	r2, [pc, #184]	; (800042c <GPIO_SDx_Init+0xe8>)
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	492e      	ldr	r1, [pc, #184]	; (8000430 <GPIO_SDx_Init+0xec>)
 8000376:	400a      	ands	r2, r1
 8000378:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER&= ~(1 << 7);                  // GPIOB7 PP
 800037a:	4b2c      	ldr	r3, [pc, #176]	; (800042c <GPIO_SDx_Init+0xe8>)
 800037c:	4a2b      	ldr	r2, [pc, #172]	; (800042c <GPIO_SDx_Init+0xe8>)
 800037e:	6852      	ldr	r2, [r2, #4]
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	438a      	bics	r2, r1
 8000384:	605a      	str	r2, [r3, #4]
	GPIOB->PUPDR |= (1 << 15);
 8000386:	4b29      	ldr	r3, [pc, #164]	; (800042c <GPIO_SDx_Init+0xe8>)
 8000388:	4a28      	ldr	r2, [pc, #160]	; (800042c <GPIO_SDx_Init+0xe8>)
 800038a:	68d2      	ldr	r2, [r2, #12]
 800038c:	2180      	movs	r1, #128	; 0x80
 800038e:	0209      	lsls	r1, r1, #8
 8000390:	430a      	orrs	r2, r1
 8000392:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR &= ~(1 <<14);                  // GPIOB7 Pull-Down
 8000394:	4b25      	ldr	r3, [pc, #148]	; (800042c <GPIO_SDx_Init+0xe8>)
 8000396:	4a25      	ldr	r2, [pc, #148]	; (800042c <GPIO_SDx_Init+0xe8>)
 8000398:	68d2      	ldr	r2, [r2, #12]
 800039a:	4926      	ldr	r1, [pc, #152]	; (8000434 <GPIO_SDx_Init+0xf0>)
 800039c:	400a      	ands	r2, r1
 800039e:	60da      	str	r2, [r3, #12]
	A_PHASE_OFF;
 80003a0:	4b22      	ldr	r3, [pc, #136]	; (800042c <GPIO_SDx_Init+0xe8>)
 80003a2:	4a22      	ldr	r2, [pc, #136]	; (800042c <GPIO_SDx_Init+0xe8>)
 80003a4:	6952      	ldr	r2, [r2, #20]
 80003a6:	2180      	movs	r1, #128	; 0x80
 80003a8:	438a      	bics	r2, r1
 80003aa:	615a      	str	r2, [r3, #20]
	GPIOA->MODER |= (1 << 24) | (1 << 22);
 80003ac:	23a0      	movs	r3, #160	; 0xa0
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	22a0      	movs	r2, #160	; 0xa0
 80003b2:	05d2      	lsls	r2, r2, #23
 80003b4:	6812      	ldr	r2, [r2, #0]
 80003b6:	21a0      	movs	r1, #160	; 0xa0
 80003b8:	0449      	lsls	r1, r1, #17
 80003ba:	430a      	orrs	r2, r1
 80003bc:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~((1 << 25) | (1 << 23));    // PA11 PA12 Output
 80003be:	23a0      	movs	r3, #160	; 0xa0
 80003c0:	05db      	lsls	r3, r3, #23
 80003c2:	22a0      	movs	r2, #160	; 0xa0
 80003c4:	05d2      	lsls	r2, r2, #23
 80003c6:	6812      	ldr	r2, [r2, #0]
 80003c8:	491b      	ldr	r1, [pc, #108]	; (8000438 <GPIO_SDx_Init+0xf4>)
 80003ca:	400a      	ands	r2, r1
 80003cc:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~((1 << 12) | (1 << 11));   // PA11 PA12 PP
 80003ce:	23a0      	movs	r3, #160	; 0xa0
 80003d0:	05db      	lsls	r3, r3, #23
 80003d2:	22a0      	movs	r2, #160	; 0xa0
 80003d4:	05d2      	lsls	r2, r2, #23
 80003d6:	6852      	ldr	r2, [r2, #4]
 80003d8:	4918      	ldr	r1, [pc, #96]	; (800043c <GPIO_SDx_Init+0xf8>)
 80003da:	400a      	ands	r2, r1
 80003dc:	605a      	str	r2, [r3, #4]
	GPIOA->PUPDR |= (1 << 25) | (1 << 23);
 80003de:	23a0      	movs	r3, #160	; 0xa0
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	22a0      	movs	r2, #160	; 0xa0
 80003e4:	05d2      	lsls	r2, r2, #23
 80003e6:	68d2      	ldr	r2, [r2, #12]
 80003e8:	21a0      	movs	r1, #160	; 0xa0
 80003ea:	0489      	lsls	r1, r1, #18
 80003ec:	430a      	orrs	r2, r1
 80003ee:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR &= ~((1 << 24) | (1 << 22));    // PA11 PA12 Pull-Down
 80003f0:	23a0      	movs	r3, #160	; 0xa0
 80003f2:	05db      	lsls	r3, r3, #23
 80003f4:	22a0      	movs	r2, #160	; 0xa0
 80003f6:	05d2      	lsls	r2, r2, #23
 80003f8:	68d2      	ldr	r2, [r2, #12]
 80003fa:	4911      	ldr	r1, [pc, #68]	; (8000440 <GPIO_SDx_Init+0xfc>)
 80003fc:	400a      	ands	r2, r1
 80003fe:	60da      	str	r2, [r3, #12]
	B_PHASE_OFF;
 8000400:	23a0      	movs	r3, #160	; 0xa0
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	22a0      	movs	r2, #160	; 0xa0
 8000406:	05d2      	lsls	r2, r2, #23
 8000408:	6952      	ldr	r2, [r2, #20]
 800040a:	490e      	ldr	r1, [pc, #56]	; (8000444 <GPIO_SDx_Init+0x100>)
 800040c:	400a      	ands	r2, r1
 800040e:	615a      	str	r2, [r3, #20]
	C_PHASE_OFF;
 8000410:	23a0      	movs	r3, #160	; 0xa0
 8000412:	05db      	lsls	r3, r3, #23
 8000414:	22a0      	movs	r2, #160	; 0xa0
 8000416:	05d2      	lsls	r2, r2, #23
 8000418:	6952      	ldr	r2, [r2, #20]
 800041a:	490b      	ldr	r1, [pc, #44]	; (8000448 <GPIO_SDx_Init+0x104>)
 800041c:	400a      	ands	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	40021000 	.word	0x40021000
 800042c:	50000400 	.word	0x50000400
 8000430:	ffff7fff 	.word	0xffff7fff
 8000434:	ffffbfff 	.word	0xffffbfff
 8000438:	fd7fffff 	.word	0xfd7fffff
 800043c:	ffffe7ff 	.word	0xffffe7ff
 8000440:	febfffff 	.word	0xfebfffff
 8000444:	fffff7ff 	.word	0xfffff7ff
 8000448:	ffffefff 	.word	0xffffefff

0800044c <Bridge_A_B>:

void Bridge_A_B(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	COMP_OFF;
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <Bridge_A_B+0x78>)
 8000452:	4a1c      	ldr	r2, [pc, #112]	; (80004c4 <Bridge_A_B+0x78>)
 8000454:	6812      	ldr	r2, [r2, #0]
 8000456:	2101      	movs	r1, #1
 8000458:	438a      	bics	r2, r1
 800045a:	601a      	str	r2, [r3, #0]
	A_PHASE_ON;
 800045c:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <Bridge_A_B+0x7c>)
 800045e:	4a1a      	ldr	r2, [pc, #104]	; (80004c8 <Bridge_A_B+0x7c>)
 8000460:	6952      	ldr	r2, [r2, #20]
 8000462:	2180      	movs	r1, #128	; 0x80
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
	PWM_A_ON;
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	22fa      	movs	r2, #250	; 0xfa
 800046e:	635a      	str	r2, [r3, #52]	; 0x34
	B_PHASE_LOW_ON;
 8000470:	23a0      	movs	r3, #160	; 0xa0
 8000472:	05db      	lsls	r3, r3, #23
 8000474:	22a0      	movs	r2, #160	; 0xa0
 8000476:	05d2      	lsls	r2, r2, #23
 8000478:	6952      	ldr	r2, [r2, #20]
 800047a:	2180      	movs	r1, #128	; 0x80
 800047c:	0109      	lsls	r1, r1, #4
 800047e:	430a      	orrs	r2, r1
 8000480:	615a      	str	r2, [r3, #20]
 8000482:	2380      	movs	r3, #128	; 0x80
 8000484:	05db      	lsls	r3, r3, #23
 8000486:	2200      	movs	r2, #0
 8000488:	639a      	str	r2, [r3, #56]	; 0x38
	C_PHASE_OFF;
 800048a:	23a0      	movs	r3, #160	; 0xa0
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	22a0      	movs	r2, #160	; 0xa0
 8000490:	05d2      	lsls	r2, r2, #23
 8000492:	6952      	ldr	r2, [r2, #20]
 8000494:	490d      	ldr	r1, [pc, #52]	; (80004cc <Bridge_A_B+0x80>)
 8000496:	400a      	ands	r2, r1
 8000498:	615a      	str	r2, [r3, #20]
	COMP_C_PHASE;
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <Bridge_A_B+0x78>)
 800049c:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <Bridge_A_B+0x78>)
 800049e:	6812      	ldr	r2, [r2, #0]
 80004a0:	2120      	movs	r1, #32
 80004a2:	430a      	orrs	r2, r1
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <Bridge_A_B+0x78>)
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <Bridge_A_B+0x78>)
 80004aa:	6812      	ldr	r2, [r2, #0]
 80004ac:	2110      	movs	r1, #16
 80004ae:	430a      	orrs	r2, r1
 80004b0:	601a      	str	r2, [r3, #0]
	COMP_ON;
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <Bridge_A_B+0x78>)
 80004b4:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <Bridge_A_B+0x78>)
 80004b6:	6812      	ldr	r2, [r2, #0]
 80004b8:	2101      	movs	r1, #1
 80004ba:	430a      	orrs	r2, r1
 80004bc:	601a      	str	r2, [r3, #0]
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40010018 	.word	0x40010018
 80004c8:	50000400 	.word	0x50000400
 80004cc:	ffffefff 	.word	0xffffefff

080004d0 <Bridge_B_C>:

void Bridge_B_C(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	COMP_OFF;
 80004d4:	4b1d      	ldr	r3, [pc, #116]	; (800054c <Bridge_B_C+0x7c>)
 80004d6:	4a1d      	ldr	r2, [pc, #116]	; (800054c <Bridge_B_C+0x7c>)
 80004d8:	6812      	ldr	r2, [r2, #0]
 80004da:	2101      	movs	r1, #1
 80004dc:	438a      	bics	r2, r1
 80004de:	601a      	str	r2, [r3, #0]
	B_PHASE_ON;
 80004e0:	23a0      	movs	r3, #160	; 0xa0
 80004e2:	05db      	lsls	r3, r3, #23
 80004e4:	22a0      	movs	r2, #160	; 0xa0
 80004e6:	05d2      	lsls	r2, r2, #23
 80004e8:	6952      	ldr	r2, [r2, #20]
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0109      	lsls	r1, r1, #4
 80004ee:	430a      	orrs	r2, r1
 80004f0:	615a      	str	r2, [r3, #20]
	PWM_B_ON;
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	22fa      	movs	r2, #250	; 0xfa
 80004f8:	639a      	str	r2, [r3, #56]	; 0x38
	C_PHASE_LOW_ON;
 80004fa:	23a0      	movs	r3, #160	; 0xa0
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	22a0      	movs	r2, #160	; 0xa0
 8000500:	05d2      	lsls	r2, r2, #23
 8000502:	6952      	ldr	r2, [r2, #20]
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	0149      	lsls	r1, r1, #5
 8000508:	430a      	orrs	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	2200      	movs	r2, #0
 8000512:	63da      	str	r2, [r3, #60]	; 0x3c
	A_PHASE_OFF;
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <Bridge_B_C+0x80>)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <Bridge_B_C+0x80>)
 8000518:	6952      	ldr	r2, [r2, #20]
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	438a      	bics	r2, r1
 800051e:	615a      	str	r2, [r3, #20]
	COMP_A_PHASE;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <Bridge_B_C+0x7c>)
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <Bridge_B_C+0x7c>)
 8000524:	6812      	ldr	r2, [r2, #0]
 8000526:	2120      	movs	r1, #32
 8000528:	438a      	bics	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <Bridge_B_C+0x7c>)
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <Bridge_B_C+0x7c>)
 8000530:	6812      	ldr	r2, [r2, #0]
 8000532:	2110      	movs	r1, #16
 8000534:	430a      	orrs	r2, r1
 8000536:	601a      	str	r2, [r3, #0]
	COMP_ON;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <Bridge_B_C+0x7c>)
 800053a:	4a04      	ldr	r2, [pc, #16]	; (800054c <Bridge_B_C+0x7c>)
 800053c:	6812      	ldr	r2, [r2, #0]
 800053e:	2101      	movs	r1, #1
 8000540:	430a      	orrs	r2, r1
 8000542:	601a      	str	r2, [r3, #0]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40010018 	.word	0x40010018
 8000550:	50000400 	.word	0x50000400

08000554 <Bridge_C_A>:

void Bridge_C_A(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	COMP_OFF;
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <Bridge_C_A+0x78>)
 800055a:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <Bridge_C_A+0x78>)
 800055c:	6812      	ldr	r2, [r2, #0]
 800055e:	2101      	movs	r1, #1
 8000560:	438a      	bics	r2, r1
 8000562:	601a      	str	r2, [r3, #0]
	C_PHASE_ON;
 8000564:	23a0      	movs	r3, #160	; 0xa0
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	22a0      	movs	r2, #160	; 0xa0
 800056a:	05d2      	lsls	r2, r2, #23
 800056c:	6952      	ldr	r2, [r2, #20]
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	0149      	lsls	r1, r1, #5
 8000572:	430a      	orrs	r2, r1
 8000574:	615a      	str	r2, [r3, #20]
	PWM_C_ON;
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	22fa      	movs	r2, #250	; 0xfa
 800057c:	63da      	str	r2, [r3, #60]	; 0x3c
	A_PHASE_LOW_ON;
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <Bridge_C_A+0x7c>)
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <Bridge_C_A+0x7c>)
 8000582:	6952      	ldr	r2, [r2, #20]
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	430a      	orrs	r2, r1
 8000588:	615a      	str	r2, [r3, #20]
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	2200      	movs	r2, #0
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
	B_PHASE_OFF;
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	22a0      	movs	r2, #160	; 0xa0
 8000598:	05d2      	lsls	r2, r2, #23
 800059a:	6952      	ldr	r2, [r2, #20]
 800059c:	490d      	ldr	r1, [pc, #52]	; (80005d4 <Bridge_C_A+0x80>)
 800059e:	400a      	ands	r2, r1
 80005a0:	615a      	str	r2, [r3, #20]
	COMP_B_PHASE;
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <Bridge_C_A+0x78>)
 80005a4:	4a09      	ldr	r2, [pc, #36]	; (80005cc <Bridge_C_A+0x78>)
 80005a6:	6812      	ldr	r2, [r2, #0]
 80005a8:	2120      	movs	r1, #32
 80005aa:	430a      	orrs	r2, r1
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <Bridge_C_A+0x78>)
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <Bridge_C_A+0x78>)
 80005b2:	6812      	ldr	r2, [r2, #0]
 80005b4:	2110      	movs	r1, #16
 80005b6:	438a      	bics	r2, r1
 80005b8:	601a      	str	r2, [r3, #0]
	COMP_ON;
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <Bridge_C_A+0x78>)
 80005bc:	4a03      	ldr	r2, [pc, #12]	; (80005cc <Bridge_C_A+0x78>)
 80005be:	6812      	ldr	r2, [r2, #0]
 80005c0:	2101      	movs	r1, #1
 80005c2:	430a      	orrs	r2, r1
 80005c4:	601a      	str	r2, [r3, #0]
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40010018 	.word	0x40010018
 80005d0:	50000400 	.word	0x50000400
 80005d4:	fffff7ff 	.word	0xfffff7ff

080005d8 <Bridge_A_C>:

void Bridge_A_C(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	COMP_OFF;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <Bridge_A_C+0x78>)
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <Bridge_A_C+0x78>)
 80005e0:	6812      	ldr	r2, [r2, #0]
 80005e2:	2101      	movs	r1, #1
 80005e4:	438a      	bics	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]
	A_PHASE_ON;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <Bridge_A_C+0x7c>)
 80005ea:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <Bridge_A_C+0x7c>)
 80005ec:	6952      	ldr	r2, [r2, #20]
 80005ee:	2180      	movs	r1, #128	; 0x80
 80005f0:	430a      	orrs	r2, r1
 80005f2:	615a      	str	r2, [r3, #20]
	PWM_A_ON;
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	05db      	lsls	r3, r3, #23
 80005f8:	22fa      	movs	r2, #250	; 0xfa
 80005fa:	635a      	str	r2, [r3, #52]	; 0x34
	C_PHASE_LOW_ON;
 80005fc:	23a0      	movs	r3, #160	; 0xa0
 80005fe:	05db      	lsls	r3, r3, #23
 8000600:	22a0      	movs	r2, #160	; 0xa0
 8000602:	05d2      	lsls	r2, r2, #23
 8000604:	6952      	ldr	r2, [r2, #20]
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	0149      	lsls	r1, r1, #5
 800060a:	430a      	orrs	r2, r1
 800060c:	615a      	str	r2, [r3, #20]
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	2200      	movs	r2, #0
 8000614:	63da      	str	r2, [r3, #60]	; 0x3c
	B_PHASE_OFF;
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	22a0      	movs	r2, #160	; 0xa0
 800061c:	05d2      	lsls	r2, r2, #23
 800061e:	6952      	ldr	r2, [r2, #20]
 8000620:	490d      	ldr	r1, [pc, #52]	; (8000658 <Bridge_A_C+0x80>)
 8000622:	400a      	ands	r2, r1
 8000624:	615a      	str	r2, [r3, #20]
	COMP_B_PHASE;
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <Bridge_A_C+0x78>)
 8000628:	4a09      	ldr	r2, [pc, #36]	; (8000650 <Bridge_A_C+0x78>)
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	2120      	movs	r1, #32
 800062e:	430a      	orrs	r2, r1
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <Bridge_A_C+0x78>)
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <Bridge_A_C+0x78>)
 8000636:	6812      	ldr	r2, [r2, #0]
 8000638:	2110      	movs	r1, #16
 800063a:	438a      	bics	r2, r1
 800063c:	601a      	str	r2, [r3, #0]
	COMP_ON;
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <Bridge_A_C+0x78>)
 8000640:	4a03      	ldr	r2, [pc, #12]	; (8000650 <Bridge_A_C+0x78>)
 8000642:	6812      	ldr	r2, [r2, #0]
 8000644:	2101      	movs	r1, #1
 8000646:	430a      	orrs	r2, r1
 8000648:	601a      	str	r2, [r3, #0]
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40010018 	.word	0x40010018
 8000654:	50000400 	.word	0x50000400
 8000658:	fffff7ff 	.word	0xfffff7ff

0800065c <Bridge_C_B>:

void Bridge_C_B(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	COMP_OFF;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <Bridge_C_B+0x7c>)
 8000662:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <Bridge_C_B+0x7c>)
 8000664:	6812      	ldr	r2, [r2, #0]
 8000666:	2101      	movs	r1, #1
 8000668:	438a      	bics	r2, r1
 800066a:	601a      	str	r2, [r3, #0]
	C_PHASE_ON;
 800066c:	23a0      	movs	r3, #160	; 0xa0
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	22a0      	movs	r2, #160	; 0xa0
 8000672:	05d2      	lsls	r2, r2, #23
 8000674:	6952      	ldr	r2, [r2, #20]
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	0149      	lsls	r1, r1, #5
 800067a:	430a      	orrs	r2, r1
 800067c:	615a      	str	r2, [r3, #20]
	PWM_C_ON;
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	22fa      	movs	r2, #250	; 0xfa
 8000684:	63da      	str	r2, [r3, #60]	; 0x3c
	B_PHASE_LOW_ON;
 8000686:	23a0      	movs	r3, #160	; 0xa0
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	22a0      	movs	r2, #160	; 0xa0
 800068c:	05d2      	lsls	r2, r2, #23
 800068e:	6952      	ldr	r2, [r2, #20]
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0109      	lsls	r1, r1, #4
 8000694:	430a      	orrs	r2, r1
 8000696:	615a      	str	r2, [r3, #20]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	2200      	movs	r2, #0
 800069e:	639a      	str	r2, [r3, #56]	; 0x38
	A_PHASE_OFF;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <Bridge_C_B+0x80>)
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <Bridge_C_B+0x80>)
 80006a4:	6952      	ldr	r2, [r2, #20]
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	438a      	bics	r2, r1
 80006aa:	615a      	str	r2, [r3, #20]
	COMP_A_PHASE;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <Bridge_C_B+0x7c>)
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <Bridge_C_B+0x7c>)
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	2120      	movs	r1, #32
 80006b4:	438a      	bics	r2, r1
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <Bridge_C_B+0x7c>)
 80006ba:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <Bridge_C_B+0x7c>)
 80006bc:	6812      	ldr	r2, [r2, #0]
 80006be:	2110      	movs	r1, #16
 80006c0:	430a      	orrs	r2, r1
 80006c2:	601a      	str	r2, [r3, #0]
	COMP_ON;
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <Bridge_C_B+0x7c>)
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <Bridge_C_B+0x7c>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	2101      	movs	r1, #1
 80006cc:	430a      	orrs	r2, r1
 80006ce:	601a      	str	r2, [r3, #0]
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40010018 	.word	0x40010018
 80006dc:	50000400 	.word	0x50000400

080006e0 <Bridge_B_A>:

void Bridge_B_A(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	COMP_OFF;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <Bridge_B_A+0x78>)
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <Bridge_B_A+0x78>)
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	2101      	movs	r1, #1
 80006ec:	438a      	bics	r2, r1
 80006ee:	601a      	str	r2, [r3, #0]
	B_PHASE_ON;
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	22a0      	movs	r2, #160	; 0xa0
 80006f6:	05d2      	lsls	r2, r2, #23
 80006f8:	6952      	ldr	r2, [r2, #20]
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	0109      	lsls	r1, r1, #4
 80006fe:	430a      	orrs	r2, r1
 8000700:	615a      	str	r2, [r3, #20]
	PWM_B_ON;
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	22fa      	movs	r2, #250	; 0xfa
 8000708:	639a      	str	r2, [r3, #56]	; 0x38
	A_PHASE_LOW_ON;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <Bridge_B_A+0x7c>)
 800070c:	4a13      	ldr	r2, [pc, #76]	; (800075c <Bridge_B_A+0x7c>)
 800070e:	6952      	ldr	r2, [r2, #20]
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	430a      	orrs	r2, r1
 8000714:	615a      	str	r2, [r3, #20]
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	2200      	movs	r2, #0
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
	C_PHASE_OFF;
 800071e:	23a0      	movs	r3, #160	; 0xa0
 8000720:	05db      	lsls	r3, r3, #23
 8000722:	22a0      	movs	r2, #160	; 0xa0
 8000724:	05d2      	lsls	r2, r2, #23
 8000726:	6952      	ldr	r2, [r2, #20]
 8000728:	490d      	ldr	r1, [pc, #52]	; (8000760 <Bridge_B_A+0x80>)
 800072a:	400a      	ands	r2, r1
 800072c:	615a      	str	r2, [r3, #20]
	COMP_C_PHASE;
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <Bridge_B_A+0x78>)
 8000730:	4a09      	ldr	r2, [pc, #36]	; (8000758 <Bridge_B_A+0x78>)
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	2120      	movs	r1, #32
 8000736:	430a      	orrs	r2, r1
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <Bridge_B_A+0x78>)
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <Bridge_B_A+0x78>)
 800073e:	6812      	ldr	r2, [r2, #0]
 8000740:	2110      	movs	r1, #16
 8000742:	430a      	orrs	r2, r1
 8000744:	601a      	str	r2, [r3, #0]
	COMP_ON;
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <Bridge_B_A+0x78>)
 8000748:	4a03      	ldr	r2, [pc, #12]	; (8000758 <Bridge_B_A+0x78>)
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	2101      	movs	r1, #1
 800074e:	430a      	orrs	r2, r1
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40010018 	.word	0x40010018
 800075c:	50000400 	.word	0x50000400
 8000760:	ffffefff 	.word	0xffffefff

08000764 <Change_Phase>:

// Change Phase
void Change_Phase(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	switch(Current_State)
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <Change_Phase+0x94>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b06      	cmp	r3, #6
 800076e:	d828      	bhi.n	80007c2 <Change_Phase+0x5e>
 8000770:	009a      	lsls	r2, r3, #2
 8000772:	4b22      	ldr	r3, [pc, #136]	; (80007fc <Change_Phase+0x98>)
 8000774:	18d3      	adds	r3, r2, r3
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	469f      	mov	pc, r3
	{
		case 1: Current_State = 2; Bridge_A_B(); break;
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <Change_Phase+0x94>)
 800077c:	2202      	movs	r2, #2
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	f7ff fe64 	bl	800044c <Bridge_A_B>
 8000784:	e034      	b.n	80007f0 <Change_Phase+0x8c>
		case 2: Current_State = 3; Bridge_A_C(); break;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <Change_Phase+0x94>)
 8000788:	2203      	movs	r2, #3
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	f7ff ff24 	bl	80005d8 <Bridge_A_C>
 8000790:	e02e      	b.n	80007f0 <Change_Phase+0x8c>
		case 3: Current_State = 4; Bridge_B_C(); break;
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <Change_Phase+0x94>)
 8000794:	2204      	movs	r2, #4
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	f7ff fe9a 	bl	80004d0 <Bridge_B_C>
 800079c:	e028      	b.n	80007f0 <Change_Phase+0x8c>
		case 4: Current_State = 5; Bridge_B_A(); break;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <Change_Phase+0x94>)
 80007a0:	2205      	movs	r2, #5
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	f7ff ff9c 	bl	80006e0 <Bridge_B_A>
 80007a8:	e022      	b.n	80007f0 <Change_Phase+0x8c>
		case 5: Current_State = 6; Bridge_C_A(); break;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <Change_Phase+0x94>)
 80007ac:	2206      	movs	r2, #6
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	f7ff fed0 	bl	8000554 <Bridge_C_A>
 80007b4:	e01c      	b.n	80007f0 <Change_Phase+0x8c>
		case 6: Current_State = 1; Bridge_C_B(); break;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <Change_Phase+0x94>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	f7ff ff4e 	bl	800065c <Bridge_C_B>
 80007c0:	e016      	b.n	80007f0 <Change_Phase+0x8c>
		default: SHUTDOWN; break;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <Change_Phase+0x9c>)
 80007c4:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <Change_Phase+0x9c>)
 80007c6:	6952      	ldr	r2, [r2, #20]
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	438a      	bics	r2, r1
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	23a0      	movs	r3, #160	; 0xa0
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	22a0      	movs	r2, #160	; 0xa0
 80007d4:	05d2      	lsls	r2, r2, #23
 80007d6:	6952      	ldr	r2, [r2, #20]
 80007d8:	490a      	ldr	r1, [pc, #40]	; (8000804 <Change_Phase+0xa0>)
 80007da:	400a      	ands	r2, r1
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	22a0      	movs	r2, #160	; 0xa0
 80007e4:	05d2      	lsls	r2, r2, #23
 80007e6:	6952      	ldr	r2, [r2, #20]
 80007e8:	4907      	ldr	r1, [pc, #28]	; (8000808 <Change_Phase+0xa4>)
 80007ea:	400a      	ands	r2, r1
 80007ec:	615a      	str	r2, [r3, #20]
 80007ee:	46c0      	nop			; (mov r8, r8)
	}
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	2000001c 	.word	0x2000001c
 80007fc:	08000c9c 	.word	0x08000c9c
 8000800:	50000400 	.word	0x50000400
 8000804:	fffff7ff 	.word	0xfffff7ff
 8000808:	ffffefff 	.word	0xffffefff

0800080c <ADC1_COMP_IRQHandler>:

void ADC1_COMP_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	/* Clear IT Flag*/
	EXTI->PR |= (1 << 21);
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <ADC1_COMP_IRQHandler+0x28>)
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <ADC1_COMP_IRQHandler+0x28>)
 8000814:	6952      	ldr	r2, [r2, #20]
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	0389      	lsls	r1, r1, #14
 800081a:	430a      	orrs	r2, r1
 800081c:	615a      	str	r2, [r3, #20]
	/* Change ENABLE Phase */
	/* Rewrite Status Flag */
	LD3_TOGGLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <ADC1_COMP_IRQHandler+0x2c>)
 8000820:	4a05      	ldr	r2, [pc, #20]	; (8000838 <ADC1_COMP_IRQHandler+0x2c>)
 8000822:	6952      	ldr	r2, [r2, #20]
 8000824:	2108      	movs	r1, #8
 8000826:	404a      	eors	r2, r1
 8000828:	615a      	str	r2, [r3, #20]
	Change_Phase();
 800082a:	f7ff ff9b 	bl	8000764 <Change_Phase>
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40010400 	.word	0x40010400
 8000838:	50000400 	.word	0x50000400

0800083c <TIM2_Init>:
 *             C-Phase < -Channel 3- > PA2    <A7>
 *   @param    Prescale
 *   @retvalue None
 */
void TIM2_Init(uint16_t PSC, uint16_t ARR)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	0002      	movs	r2, r0
 8000844:	1dbb      	adds	r3, r7, #6
 8000846:	801a      	strh	r2, [r3, #0]
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	1c0a      	adds	r2, r1, #0
 800084c:	801a      	strh	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;     // ENABLE TIM2 Clock
 800084e:	4b87      	ldr	r3, [pc, #540]	; (8000a6c <TIM2_Init+0x230>)
 8000850:	4a86      	ldr	r2, [pc, #536]	; (8000a6c <TIM2_Init+0x230>)
 8000852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	639a      	str	r2, [r3, #56]	; 0x38
	/* Time Base Init*/
	TIM2->PSC = PSC;                        // Set PreScale Value
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	1dba      	adds	r2, r7, #6
 8000860:	8812      	ldrh	r2, [r2, #0]
 8000862:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = ARR;                        // Set Auto Reload Value
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	1d3a      	adds	r2, r7, #4
 800086a:	8812      	ldrh	r2, [r2, #0]
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 &= ~(0x03 << 8);              // No Division
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	05d2      	lsls	r2, r2, #23
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	497d      	ldr	r1, [pc, #500]	; (8000a70 <TIM2_Init+0x234>)
 800087a:	400a      	ands	r2, r1
 800087c:	601a      	str	r2, [r3, #0]
	TIM2->CR1 |= TIM_CR1_ARPE;              // ENABLE APRE
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	05d2      	lsls	r2, r2, #23
 8000886:	6812      	ldr	r2, [r2, #0]
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	430a      	orrs	r2, r1
 800088c:	601a      	str	r2, [r3, #0]
	TIM2->CR1 &= ~(TIM_CR1_DIR);            // Counter Up
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	05d2      	lsls	r2, r2, #23
 8000896:	6812      	ldr	r2, [r2, #0]
 8000898:	2110      	movs	r1, #16
 800089a:	438a      	bics	r2, r1
 800089c:	601a      	str	r2, [r3, #0]
	TIM2->CR1 &= ~(0x03 << 5);              // Edge Align Mode
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	05d2      	lsls	r2, r2, #23
 80008a6:	6812      	ldr	r2, [r2, #0]
 80008a8:	2160      	movs	r1, #96	; 0x60
 80008aa:	438a      	bics	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
	TIM2->CR1 &= ~(1 << 3);                 // Pulses Mode
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	05d2      	lsls	r2, r2, #23
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	2108      	movs	r1, #8
 80008ba:	438a      	bics	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]
	/* Output Compare Channel 1~3 Init */
	// Channel 1
	TIM2->CCMR1 &= ~(0x07);                 // CC1 Output Normal
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	05d2      	lsls	r2, r2, #23
 80008c6:	6992      	ldr	r2, [r2, #24]
 80008c8:	2107      	movs	r1, #7
 80008ca:	438a      	bics	r2, r1
 80008cc:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC1PE;         // Update Value ON Event
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	05d2      	lsls	r2, r2, #23
 80008d6:	6992      	ldr	r2, [r2, #24]
 80008d8:	2108      	movs	r1, #8
 80008da:	430a      	orrs	r2, r1
 80008dc:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= 0x60;                    // PWM Mode 1
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	05d2      	lsls	r2, r2, #23
 80008e6:	6992      	ldr	r2, [r2, #24]
 80008e8:	2160      	movs	r1, #96	; 0x60
 80008ea:	430a      	orrs	r2, r1
 80008ec:	619a      	str	r2, [r3, #24]
	TIM2->CCER  &= ~TIM_CCER_CC1P;           // Active High
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	05d2      	lsls	r2, r2, #23
 80008f6:	6a12      	ldr	r2, [r2, #32]
 80008f8:	2102      	movs	r1, #2
 80008fa:	438a      	bics	r2, r1
 80008fc:	621a      	str	r2, [r3, #32]
	// Channel 2
	TIM2->CCMR1 &= ~(0x07 << 8);            // CC2 Output Normal
 80008fe:	2380      	movs	r3, #128	; 0x80
 8000900:	05db      	lsls	r3, r3, #23
 8000902:	2280      	movs	r2, #128	; 0x80
 8000904:	05d2      	lsls	r2, r2, #23
 8000906:	6992      	ldr	r2, [r2, #24]
 8000908:	495a      	ldr	r1, [pc, #360]	; (8000a74 <TIM2_Init+0x238>)
 800090a:	400a      	ands	r2, r1
 800090c:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2PE;         // Update when UEV
 800090e:	2380      	movs	r3, #128	; 0x80
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	05d2      	lsls	r2, r2, #23
 8000916:	6992      	ldr	r2, [r2, #24]
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	0109      	lsls	r1, r1, #4
 800091c:	430a      	orrs	r2, r1
 800091e:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= 0x6000;                  // PWM Mode 1
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	05d2      	lsls	r2, r2, #23
 8000928:	6992      	ldr	r2, [r2, #24]
 800092a:	21c0      	movs	r1, #192	; 0xc0
 800092c:	01c9      	lsls	r1, r1, #7
 800092e:	430a      	orrs	r2, r1
 8000930:	619a      	str	r2, [r3, #24]
	TIM2->CCER  &= ~TIM_CCER_CC2P;           // Active High
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	05d2      	lsls	r2, r2, #23
 800093a:	6a12      	ldr	r2, [r2, #32]
 800093c:	2120      	movs	r1, #32
 800093e:	438a      	bics	r2, r1
 8000940:	621a      	str	r2, [r3, #32]
	// Channel 3
	TIM2->CCMR2 &= ~(0x07);                 // CC3 Output Normal
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	05d2      	lsls	r2, r2, #23
 800094a:	69d2      	ldr	r2, [r2, #28]
 800094c:	2107      	movs	r1, #7
 800094e:	438a      	bics	r2, r1
 8000950:	61da      	str	r2, [r3, #28]
	TIM2->CCMR2 |= TIM_CCMR2_OC3PE;         // Update when UEV
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	05d2      	lsls	r2, r2, #23
 800095a:	69d2      	ldr	r2, [r2, #28]
 800095c:	2108      	movs	r1, #8
 800095e:	430a      	orrs	r2, r1
 8000960:	61da      	str	r2, [r3, #28]
	TIM2->CCMR2 |= 0x60;                    // PWM Mode 1
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	05db      	lsls	r3, r3, #23
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	05d2      	lsls	r2, r2, #23
 800096a:	69d2      	ldr	r2, [r2, #28]
 800096c:	2160      	movs	r1, #96	; 0x60
 800096e:	430a      	orrs	r2, r1
 8000970:	61da      	str	r2, [r3, #28]
	TIM2->CCER  &= ~TIM_CCER_CC3P;         // Active High
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	05d2      	lsls	r2, r2, #23
 800097a:	6a12      	ldr	r2, [r2, #32]
 800097c:	493e      	ldr	r1, [pc, #248]	; (8000a78 <TIM2_Init+0x23c>)
 800097e:	400a      	ands	r2, r1
 8000980:	621a      	str	r2, [r3, #32]
	/* GPIO Init */
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;      // ENABLE GPIOA Clock
 8000982:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <TIM2_Init+0x230>)
 8000984:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <TIM2_Init+0x230>)
 8000986:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000988:	2101      	movs	r1, #1
 800098a:	430a      	orrs	r2, r1
 800098c:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOA->MODER |= (1 << 17) | (1 << 5);   // PA2 PA8 AF
 800098e:	23a0      	movs	r3, #160	; 0xa0
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	22a0      	movs	r2, #160	; 0xa0
 8000994:	05d2      	lsls	r2, r2, #23
 8000996:	6812      	ldr	r2, [r2, #0]
 8000998:	4938      	ldr	r1, [pc, #224]	; (8000a7c <TIM2_Init+0x240>)
 800099a:	430a      	orrs	r2, r1
 800099c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~((1 << 16) | (1 << 4));
 800099e:	23a0      	movs	r3, #160	; 0xa0
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	22a0      	movs	r2, #160	; 0xa0
 80009a4:	05d2      	lsls	r2, r2, #23
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	4935      	ldr	r1, [pc, #212]	; (8000a80 <TIM2_Init+0x244>)
 80009aa:	400a      	ands	r2, r1
 80009ac:	601a      	str	r2, [r3, #0]
	GPIOA->OTYPER &= ~((1 << 2) | (1 << 8));// PA2 PA8 PP
 80009ae:	23a0      	movs	r3, #160	; 0xa0
 80009b0:	05db      	lsls	r3, r3, #23
 80009b2:	22a0      	movs	r2, #160	; 0xa0
 80009b4:	05d2      	lsls	r2, r2, #23
 80009b6:	6852      	ldr	r2, [r2, #4]
 80009b8:	4932      	ldr	r1, [pc, #200]	; (8000a84 <TIM2_Init+0x248>)
 80009ba:	400a      	ands	r2, r1
 80009bc:	605a      	str	r2, [r3, #4]
	GPIOA->OSPEEDR |= (0x03 << 4) | (0x03 << 16);
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	22a0      	movs	r2, #160	; 0xa0
 80009c4:	05d2      	lsls	r2, r2, #23
 80009c6:	6892      	ldr	r2, [r2, #8]
 80009c8:	492f      	ldr	r1, [pc, #188]	; (8000a88 <TIM2_Init+0x24c>)
 80009ca:	430a      	orrs	r2, r1
 80009cc:	609a      	str	r2, [r3, #8]
	 	 	 	 	 	 	 	 	 	 	//PA2 PA8 High Speed
	GPIOA->PUPDR |= (1 << 16) | (1 << 4);
 80009ce:	23a0      	movs	r3, #160	; 0xa0
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	22a0      	movs	r2, #160	; 0xa0
 80009d4:	05d2      	lsls	r2, r2, #23
 80009d6:	68d2      	ldr	r2, [r2, #12]
 80009d8:	492c      	ldr	r1, [pc, #176]	; (8000a8c <TIM2_Init+0x250>)
 80009da:	430a      	orrs	r2, r1
 80009dc:	60da      	str	r2, [r3, #12]
//	GPIOA->PUPDR &= ~((1 << 17) | (1 << 5));// PA2 PA8 Pull-Up
	GPIOA->AFR[0] |= 0x00000200;            // PA2 <--> TIM2_CH3
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	22a0      	movs	r2, #160	; 0xa0
 80009e4:	05d2      	lsls	r2, r2, #23
 80009e6:	6a12      	ldr	r2, [r2, #32]
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	0089      	lsls	r1, r1, #2
 80009ec:	430a      	orrs	r2, r1
 80009ee:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[1] |= 0x00000005;            // PA8 <--> TIM2_CH1
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	22a0      	movs	r2, #160	; 0xa0
 80009f6:	05d2      	lsls	r2, r2, #23
 80009f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80009fa:	2105      	movs	r1, #5
 80009fc:	430a      	orrs	r2, r1
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
	RCC->IOPENR  |= RCC_IOPENR_GPIOBEN;     // ENABLE GPIOB Clock
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <TIM2_Init+0x230>)
 8000a02:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <TIM2_Init+0x230>)
 8000a04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000a06:	2102      	movs	r1, #2
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOB->MODER  |= (1 << 1);
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <TIM2_Init+0x254>)
 8000a0e:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <TIM2_Init+0x254>)
 8000a10:	6812      	ldr	r2, [r2, #0]
 8000a12:	2102      	movs	r1, #2
 8000a14:	430a      	orrs	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  &= ~0x01;                 // GPIOB0 AF
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <TIM2_Init+0x254>)
 8000a1a:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <TIM2_Init+0x254>)
 8000a1c:	6812      	ldr	r2, [r2, #0]
 8000a1e:	2101      	movs	r1, #1
 8000a20:	438a      	bics	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]
	GPIOB->OTYPER &= ~0x01;                 // GPIOB0 PP
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <TIM2_Init+0x254>)
 8000a26:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <TIM2_Init+0x254>)
 8000a28:	6852      	ldr	r2, [r2, #4]
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	438a      	bics	r2, r1
 8000a2e:	605a      	str	r2, [r3, #4]
	GPIOB->OSPEEDR|= 0x03;                  // GPIOB0 Very High
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <TIM2_Init+0x254>)
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <TIM2_Init+0x254>)
 8000a34:	6892      	ldr	r2, [r2, #8]
 8000a36:	2103      	movs	r1, #3
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	609a      	str	r2, [r3, #8]
	GPIOB->PUPDR  |= 0x01;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <TIM2_Init+0x254>)
 8000a3e:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <TIM2_Init+0x254>)
 8000a40:	68d2      	ldr	r2, [r2, #12]
 8000a42:	2101      	movs	r1, #1
 8000a44:	430a      	orrs	r2, r1
 8000a46:	60da      	str	r2, [r3, #12]
//	GPIOB->PUPDR  &= ~(1 << 1);             // GPIOB0 Pull-Up
	GPIOB->AFR[0] |= 0x2;                   // GPIOB0 TIM2_CH2
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <TIM2_Init+0x254>)
 8000a4a:	4a11      	ldr	r2, [pc, #68]	; (8000a90 <TIM2_Init+0x254>)
 8000a4c:	6a12      	ldr	r2, [r2, #32]
 8000a4e:	2102      	movs	r1, #2
 8000a50:	430a      	orrs	r2, r1
 8000a52:	621a      	str	r2, [r3, #32]

	TIM2->CR1 |= 0x01;                      // ENABLE TIM2
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	05d2      	lsls	r2, r2, #23
 8000a5c:	6812      	ldr	r2, [r2, #0]
 8000a5e:	2101      	movs	r1, #1
 8000a60:	430a      	orrs	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	fffffcff 	.word	0xfffffcff
 8000a74:	fffff8ff 	.word	0xfffff8ff
 8000a78:	fffffdff 	.word	0xfffffdff
 8000a7c:	00020020 	.word	0x00020020
 8000a80:	fffeffef 	.word	0xfffeffef
 8000a84:	fffffefb 	.word	0xfffffefb
 8000a88:	00030030 	.word	0x00030030
 8000a8c:	00010010 	.word	0x00010010
 8000a90:	50000400 	.word	0x50000400

08000a94 <TIM2_PWM_Start>:

void TIM2_PWM_Start(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	TIM2->CNT = 0x00;
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E);
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	05d2      	lsls	r2, r2, #23
 8000aa8:	6a12      	ldr	r2, [r2, #32]
 8000aaa:	2112      	movs	r1, #18
 8000aac:	31ff      	adds	r1, #255	; 0xff
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	621a      	str	r2, [r3, #32]
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <main>:
uint8_t Current_State = 0;

void SysTick_Init(uint32_t LOAD);

int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	uint8_t i;
	SysTick_Init(50000);
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <main+0x54>)
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f000 f829 	bl	8000b18 <SysTick_Init>
	LED_Init();
 8000ac6:	f7ff fb1f 	bl	8000108 <LED_Init>

	GPIO_SDx_Init();
 8000aca:	f7ff fc3b 	bl	8000344 <GPIO_SDx_Init>
	COMP1_Init();
 8000ace:	f7ff fbcd 	bl	800026c <COMP1_Init>

	TIM2_Init(1, 999);
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <main+0x58>)
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f7ff feb0 	bl	800083c <TIM2_Init>
	TIM2_PWM_Start();
 8000adc:	f7ff ffda 	bl	8000a94 <TIM2_PWM_Start>

	Current_State = 1;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <main+0x5c>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
	for(i=0;i<120;i++)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e008      	b.n	8000b00 <main+0x48>
	{
		delay();
 8000aee:	f7ff fc15 	bl	800031c <delay>
		Change_Phase();
 8000af2:	f7ff fe37 	bl	8000764 <Change_Phase>
	for(i=0;i<120;i++)
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	3201      	adds	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b77      	cmp	r3, #119	; 0x77
 8000b06:	d9f2      	bls.n	8000aee <main+0x36>
	}
	while(1);
 8000b08:	e7fe      	b.n	8000b08 <main+0x50>
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	0000c350 	.word	0x0000c350
 8000b10:	000003e7 	.word	0x000003e7
 8000b14:	2000001c 	.word	0x2000001c

08000b18 <SysTick_Init>:
}

// Init Systick Timer
void SysTick_Init(uint32_t LOAD)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	SysTick->VAL  &= 0x00000000;       //  Reset Value
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <SysTick_Init+0x2c>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <SysTick_Init+0x2c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
	SysTick->LOAD  = LOAD;             //  SysTick Freq
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <SysTick_Init+0x2c>)
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	605a      	str	r2, [r3, #4]
    SysTick->CTRL |= 0x00000007;       //  SysTick ENABLE IRQ, CLK = SYS_CLK / 8
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Init+0x2c>)
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <SysTick_Init+0x2c>)
 8000b34:	6812      	ldr	r2, [r2, #0]
 8000b36:	2107      	movs	r1, #7
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	/*
	 * Place Holder For SysTick Handler
	 */
	// Change_Phase();
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b54:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b56:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000b58:	2004      	movs	r0, #4
    LDR R1, [R0]
 8000b5a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000b5c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000b5e:	221f      	movs	r2, #31
    CMP R1, R2
 8000b60:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000b62:	d105      	bne.n	8000b70 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <LoopForever+0x6>)
    LDR R1,=0x00000001
 8000b66:	2101      	movs	r1, #1
    STR R1, [R0]
 8000b68:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000b6a:	4810      	ldr	r0, [pc, #64]	; (8000bac <LoopForever+0xa>)
    LDR R1,=0x00000000
 8000b6c:	2100      	movs	r1, #0
    STR R1, [R0]
 8000b6e:	6001      	str	r1, [r0, #0]

08000b70 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000b70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b72:	e003      	b.n	8000b7c <LoopCopyDataInit>

08000b74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <LoopForever+0xe>)
  ldr  r3, [r3, r1]
 8000b76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b7a:	3104      	adds	r1, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopForever+0x12>)
  ldr  r3, =_edata
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <LoopForever+0x16>)
  adds  r2, r0, r1
 8000b80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b84:	d3f6      	bcc.n	8000b74 <CopyDataInit>
  ldr  r2, =_sbss
 8000b86:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <LoopForever+0x1a>)
  b  LoopFillZerobss
 8000b88:	e002      	b.n	8000b90 <LoopFillZerobss>

08000b8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000b8a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b8c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8e:	3204      	adds	r2, #4

08000b90 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <LoopForever+0x1e>)
  cmp  r2, r3
 8000b92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b94:	d3f9      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b96:	f000 f817 	bl	8000bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f000 f84f 	bl	8000c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff ff8b 	bl	8000ab8 <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
   ldr   r0, =_estack
 8000ba4:	20000800 	.word	0x20000800
    LDR R0,=0x40021034
 8000ba8:	40021034 	.word	0x40021034
    LDR R0,=0x40010000
 8000bac:	40010000 	.word	0x40010000
  ldr  r3, =_sidata
 8000bb0:	08000cc0 	.word	0x08000cc0
  ldr  r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bb8:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000bbc:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000bc0:	20000020 	.word	0x20000020

08000bc4 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <DMA1_Channel1_IRQHandler>
	...

08000bc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <SystemInit+0x5c>)
 8000bce:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <SystemInit+0x5c>)
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	0049      	lsls	r1, r1, #1
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  // RCC->CFGR &= (uint32_t) 0x88FF400C;
  RCC->CFGR = (uint32_t) 0x0280000f;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <SystemInit+0x5c>)
 8000bdc:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <SystemInit+0x60>)
 8000bde:	60da      	str	r2, [r3, #12]
  // PLL

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR |= (1 << 24) | (1 << 0);
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <SystemInit+0x5c>)
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <SystemInit+0x5c>)
 8000be4:	6812      	ldr	r2, [r2, #0]
 8000be6:	4911      	ldr	r1, [pc, #68]	; (8000c2c <SystemInit+0x64>)
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <SystemInit+0x5c>)
 8000bee:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <SystemInit+0x5c>)
 8000bf0:	6892      	ldr	r2, [r2, #8]
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	438a      	bics	r2, r1
 8000bf6:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <SystemInit+0x5c>)
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <SystemInit+0x5c>)
 8000bfc:	6812      	ldr	r2, [r2, #0]
 8000bfe:	490c      	ldr	r1, [pc, #48]	; (8000c30 <SystemInit+0x68>)
 8000c00:	400a      	ands	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <SystemInit+0x5c>)
 8000c06:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <SystemInit+0x5c>)
 8000c08:	68d2      	ldr	r2, [r2, #12]
 8000c0a:	490a      	ldr	r1, [pc, #40]	; (8000c34 <SystemInit+0x6c>)
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SystemInit+0x5c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <SystemInit+0x70>)
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	0512      	lsls	r2, r2, #20
 8000c1c:	609a      	str	r2, [r3, #8]
#endif
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021000 	.word	0x40021000
 8000c28:	0280000f 	.word	0x0280000f
 8000c2c:	01000001 	.word	0x01000001
 8000c30:	fffbffff 	.word	0xfffbffff
 8000c34:	ff02ffff 	.word	0xff02ffff
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__libc_init_array>:
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	2600      	movs	r6, #0
 8000c40:	4d0c      	ldr	r5, [pc, #48]	; (8000c74 <__libc_init_array+0x38>)
 8000c42:	4c0d      	ldr	r4, [pc, #52]	; (8000c78 <__libc_init_array+0x3c>)
 8000c44:	1b64      	subs	r4, r4, r5
 8000c46:	10a4      	asrs	r4, r4, #2
 8000c48:	42a6      	cmp	r6, r4
 8000c4a:	d109      	bne.n	8000c60 <__libc_init_array+0x24>
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	f000 f819 	bl	8000c84 <_init>
 8000c52:	4d0a      	ldr	r5, [pc, #40]	; (8000c7c <__libc_init_array+0x40>)
 8000c54:	4c0a      	ldr	r4, [pc, #40]	; (8000c80 <__libc_init_array+0x44>)
 8000c56:	1b64      	subs	r4, r4, r5
 8000c58:	10a4      	asrs	r4, r4, #2
 8000c5a:	42a6      	cmp	r6, r4
 8000c5c:	d105      	bne.n	8000c6a <__libc_init_array+0x2e>
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	00b3      	lsls	r3, r6, #2
 8000c62:	58eb      	ldr	r3, [r5, r3]
 8000c64:	4798      	blx	r3
 8000c66:	3601      	adds	r6, #1
 8000c68:	e7ee      	b.n	8000c48 <__libc_init_array+0xc>
 8000c6a:	00b3      	lsls	r3, r6, #2
 8000c6c:	58eb      	ldr	r3, [r5, r3]
 8000c6e:	4798      	blx	r3
 8000c70:	3601      	adds	r6, #1
 8000c72:	e7f2      	b.n	8000c5a <__libc_init_array+0x1e>
 8000c74:	08000cb8 	.word	0x08000cb8
 8000c78:	08000cb8 	.word	0x08000cb8
 8000c7c:	08000cb8 	.word	0x08000cb8
 8000c80:	08000cbc 	.word	0x08000cbc

08000c84 <_init>:
 8000c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8a:	bc08      	pop	{r3}
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	4770      	bx	lr

08000c90 <_fini>:
 8000c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c96:	bc08      	pop	{r3}
 8000c98:	469e      	mov	lr, r3
 8000c9a:	4770      	bx	lr
